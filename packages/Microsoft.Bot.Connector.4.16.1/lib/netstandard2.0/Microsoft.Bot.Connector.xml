<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Bot.Connector</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Bot.Connector.Attachments">
            <summary>
            Attachments operations.
            </summary>
            <summary>
            Addition helper code for Attachments.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Attachments.#ctor(Microsoft.Bot.Connector.ConnectorClient)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.Attachments"/> class.
            </summary>
            <param name='client'>
            Reference to the service client.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null.
            </exception>
        </member>
        <member name="P:Microsoft.Bot.Connector.Attachments.Client">
            <summary>
            Gets a reference to the ConnectorClient.
            </summary>
            <value>The ClientConnector.</value>
        </member>
        <member name="M:Microsoft.Bot.Connector.Attachments.GetAttachmentInfoWithHttpMessagesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            GetAttachmentInfo.
            </summary>
            <remarks>
            Get AttachmentInfo structure describing the attachment views.
            </remarks>
            <param name='attachmentId'>
            attachment id.
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Bot.Schema.ErrorResponseException">
            Thrown when the operation returned an invalid status code.
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response.
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when an input value does not match the expected data type, range or pattern.
            </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown when a required parameter is null. </exception>
            <returns>
            A response object containing the response body and response headers.
            </returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Attachments.GetAttachmentWithHttpMessagesAsync(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            GetAttachment.
            </summary>
            <remarks>
            Get the named view as binary content.
            </remarks>
            <param name='attachmentId'>
            attachment id.
            </param>
            <param name='viewId'>
            View id from attachmentInfo.
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Bot.Schema.ErrorResponseException">
            Thrown when the operation returned an invalid status code.
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response.
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when an input value does not match the expected data type, range or pattern of the data field.
            </exception>
            <exception cref="T:System.ArgumentNullException">Thrown when a required parameter is null.</exception>
            <returns>
            A response object containing the response body and response headers.
            </returns>
        </member>
        <member name="F:Microsoft.Bot.Connector.Attachments._httpClient">
            <summary>
            The attachment code uses this client. Ideally, this would be passed in or set via a DI system to
            allow developer control over behavior / headers / timesouts and such. Unfortunately this is buried
            pretty deep, the static solution used here is much cleaner. If this becomes an issue we could
            consider circling back and exposing developer control over this HttpClient.
            </summary>
            <remarks>
            Relatively few bots use attachments, so rather than paying the startup cost, this is
            a <see cref="T:System.Lazy`1"/> simply to avoid paying a static initialization penalty for every bot.
            </remarks>
        </member>
        <member name="M:Microsoft.Bot.Connector.Attachments.GetAttachmentUri(System.String,System.String)">
            <summary>
            Get the URI of an attachment view.
            </summary>
            <param name="attachmentId">id of the attachment.</param>
            <param name="viewId">default is "original".</param>
            <returns>uri.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Attachments.GetAttachmentStreamAsync(System.String,System.String)">
            <summary>
            Get the given attachmentid view as a stream.
            </summary>
            <param name="attachmentId">attachmentid.</param>
            <param name="viewId">view to get (default:original).</param>
            <returns>stream of attachment.</returns>
        </member>
        <member name="T:Microsoft.Bot.Connector.AttachmentsExtensions">
            <summary>
            Extension methods for Attachments.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.AttachmentsExtensions.GetAttachmentInfoAsync(Microsoft.Bot.Connector.IAttachments,System.String,System.Threading.CancellationToken)">
            <summary>
            GetAttachmentInfo.
            </summary>
            <remarks>
            Get AttachmentInfo structure describing the attachment views.
            </remarks>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='attachmentId'>
            attachment id.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <returns>The AttachmentInfo.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.AttachmentsExtensions.GetAttachmentAsync(Microsoft.Bot.Connector.IAttachments,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            GetAttachment.
            </summary>
            <remarks>
            Get the named view as binary content.
            </remarks>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='attachmentId'>
            attachment id.
            </param>
            <param name='viewId'>
            View id from attachmentInfo.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <returns>The attachment as a Stream.</returns>
        </member>
        <member name="T:Microsoft.Bot.Connector.Authentication.AdalAuthenticator">
            <summary>
            An authentication class that implements <see cref="T:Microsoft.Bot.Connector.Authentication.IAuthenticator"/>, used to authenticate requests against Azure.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.AdalAuthenticator.#ctor(Microsoft.IdentityModel.Clients.ActiveDirectory.ClientCredential,Microsoft.Bot.Connector.Authentication.OAuthConfiguration,System.Net.Http.HttpClient)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.Authentication.AdalAuthenticator"/> class.
            </summary>
            <param name="clientCredential">The client credential to use for token acquisition.</param>
            <param name="configurationOAuth">A configuration object for OAuth client credential authentication.</param>
            <param name="customHttpClient">A customized instance of the HttpClient class.</param>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.AdalAuthenticator.#ctor(Microsoft.IdentityModel.Clients.ActiveDirectory.ClientCredential,Microsoft.Bot.Connector.Authentication.OAuthConfiguration,System.Net.Http.HttpClient,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.Authentication.AdalAuthenticator"/> class.
            </summary>
            <param name="clientCredential">The client credential to use for token acquisition.</param>
            <param name="configurationOAuth">A configuration object for OAuth client credential authentication.</param>
            <param name="customHttpClient">A customized instance of the HttpClient class.</param>
            <param name="logger">The type used to perform logging.</param>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.AdalAuthenticator.#ctor(Microsoft.IdentityModel.Clients.ActiveDirectory.ClientAssertionCertificate,Microsoft.Bot.Connector.Authentication.OAuthConfiguration,System.Net.Http.HttpClient,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.Authentication.AdalAuthenticator"/> class.
            </summary>
            <param name="clientCertificate">A client credential that includes a X509Certificate.</param>
            <param name="configurationOAuth">A configuration object for OAuth client credential authentication.</param>
            <param name="customHttpClient">A customized instance of the HttpClient class.</param>
            <param name="logger">The type used to perform logging.</param>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.AdalAuthenticator.#ctor(Microsoft.IdentityModel.Clients.ActiveDirectory.ClientAssertionCertificate,System.Boolean,Microsoft.Bot.Connector.Authentication.OAuthConfiguration,System.Net.Http.HttpClient,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.Authentication.AdalAuthenticator"/> class.
            </summary>
            <param name="clientCertificate">A client credential that includes a X509Certificate.</param>
            <param name="sendX5c">Enables easy certificates roll-over in Azure AD. Setting it to true sends the public certficate to Azure AD along with token requests.</param>
            <param name="configurationOAuth">A configuration object for OAuth client credential authentication.</param>
            <param name="customHttpClient">A customized instance of the HttpClient class.</param>
            <param name="logger">The type used to perform logging.</param>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.AdalAuthenticator.GetTokenAsync(System.Boolean)">
            <summary>
            Performs the call to acquire a security token.
            </summary>
            <param name="forceRefresh">Forces a token refresh by clearing the token cache and acquiring it again.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> object.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.AdalAuthenticator.IsAdalServiceInvalidRequest(System.Exception)">
            <summary>
            Determine whether exception represents an invalid request from AAD.
            </summary>
            <param name="ex">Exception.</param>
            <returns>True if the exception represents an invalid request.</returns>
        </member>
        <member name="T:Microsoft.Bot.Connector.Authentication.AllowedCallersClaimsValidator">
            <summary>
            Claims validator that adds application level authorization based on a simple list
            of application Ids that are allowed to call. 
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.AllowedCallersClaimsValidator.#ctor(System.Collections.Generic.IList{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.Authentication.AllowedCallersClaimsValidator"/> class.
            </summary>
            <param name="allowedCallers">List of allowed callers.</param>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.AllowedCallersClaimsValidator.ValidateClaimsAsync(System.Collections.Generic.IList{System.Security.Claims.Claim})">
            <summary>
            Validate a list of claims and throw an exception if it fails.
            </summary>
            <param name="claims">The list of claims to validate.</param>
            <returns>True if the validation is successful, false if not.</returns>
        </member>
        <member name="T:Microsoft.Bot.Connector.Authentication.AllowedSkillsClaimsValidator">
            <summary>
            A claims validator that loads an allowed list from a provided list of allowed AppIds
            and checks that responses are coming from configured skills.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.AllowedSkillsClaimsValidator.#ctor(System.Collections.Generic.IList{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.Authentication.AllowedSkillsClaimsValidator"/> class.
            </summary>
            <param name="allowedSkillAppIds">List of allowed callers referenced by appId.</param>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.AllowedSkillsClaimsValidator.ValidateClaimsAsync(System.Collections.Generic.IList{System.Security.Claims.Claim})">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Bot.Connector.Authentication.AppCredentials">
            <summary>
            Base abstraction for AAD credentials for auth and caching.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.AppCredentials._authenticator">
            <summary>
            Authenticator abstraction used to obtain tokens through the Client Credentials OAuth 2.0 flow.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.AppCredentials.#ctor(System.String,System.Net.Http.HttpClient,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.Authentication.AppCredentials"/> class.
            </summary>
            <param name="channelAuthTenant">Optional. The oauth token tenant.</param>
            <param name="customHttpClient">Optional <see cref="T:System.Net.Http.HttpClient"/> to be used when acquiring tokens.</param>
            <param name="logger">Optional <see cref="T:Microsoft.Extensions.Logging.ILogger"/> to gather telemetry data while acquiring and managing credentials.</param>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.AppCredentials.#ctor(System.String,System.Net.Http.HttpClient,Microsoft.Extensions.Logging.ILogger,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.Authentication.AppCredentials"/> class.
            </summary>
            <param name="channelAuthTenant">Optional. The oauth token tenant.</param>
            <param name="customHttpClient">Optional <see cref="T:System.Net.Http.HttpClient"/> to be used when acquiring tokens.</param>
            <param name="logger">Optional <see cref="T:Microsoft.Extensions.Logging.ILogger"/> to gather telemetry data while acquiring and managing credentials.</param>
            <param name="oAuthScope">The scope for the token.</param>
        </member>
        <member name="P:Microsoft.Bot.Connector.Authentication.AppCredentials.MicrosoftAppId">
            <summary>
            Gets or sets the Microsoft app ID for this credential.
            </summary>
            <value>
            The Microsoft app ID for this credential.
            </value>
        </member>
        <member name="P:Microsoft.Bot.Connector.Authentication.AppCredentials.ChannelAuthTenant">
            <summary>
            Gets or sets tenant to be used for channel authentication.
            </summary>
            <value>
            Tenant to be used for channel authentication.
            </value>
        </member>
        <member name="P:Microsoft.Bot.Connector.Authentication.AppCredentials.OAuthEndpoint">
            <summary>
            Gets the OAuth endpoint to use.
            </summary>
            <value>
            The OAuth endpoint to use.
            </value>
        </member>
        <member name="P:Microsoft.Bot.Connector.Authentication.AppCredentials.ValidateAuthority">
            <summary>
            Gets a value indicating whether to validate the Authority.
            </summary>
            <value>
            The ValidateAuthority value to use.
            </value>
        </member>
        <member name="P:Microsoft.Bot.Connector.Authentication.AppCredentials.OAuthScope">
            <summary>
            Gets the OAuth scope to use.
            </summary>
            <value>
            The OAuth scope to use.
            </value>
        </member>
        <member name="P:Microsoft.Bot.Connector.Authentication.AppCredentials.AuthTenant">
            <summary>
            Gets or sets the channel auth token tenant for this credential.
            </summary>
            <value>
            The channel auth token tenant for this credential.
            </value>
        </member>
        <member name="P:Microsoft.Bot.Connector.Authentication.AppCredentials.CustomHttpClient">
            <summary>
            Gets or sets the channel auth token tenant for this credential.
            </summary>
            <value>
            The channel auth token tenant for this credential.
            </value>
        </member>
        <member name="P:Microsoft.Bot.Connector.Authentication.AppCredentials.Logger">
            <summary>
            Gets or sets the channel auth token tenant for this credential.
            </summary>
            <value>
            The channel auth token tenant for this credential.
            </value>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.AppCredentials.TrustServiceUrl(System.String)">
            <summary>
            Adds the host of service url to <see cref="T:Microsoft.Bot.Connector.Authentication.MicrosoftAppCredentials"/> trusted hosts.
            </summary>
            <param name="serviceUrl">The service URL.</param>
            <remarks>If expiration time is not provided, the expiration time will DateTime.UtcNow.AddDays(1).</remarks>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.AppCredentials.TrustServiceUrl(System.String,System.DateTime)">
            <summary>
            Adds the host of service url to <see cref="T:Microsoft.Bot.Connector.Authentication.MicrosoftAppCredentials"/> trusted hosts.
            </summary>
            <param name="serviceUrl">The service URL.</param>
            <param name="expirationTime">The expiration time after which this service url is not trusted anymore.</param>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.AppCredentials.IsTrustedServiceUrl(System.String)">
            <summary>
            Checks if the service url is for a trusted host or not.
            </summary>
            <param name="serviceUrl">The service url.</param>
            <returns>True if the host of the service url is trusted; False otherwise.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.AppCredentials.ProcessHttpRequestAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <summary>
            Apply the credentials to the HTTP request.
            </summary>
            <param name="request">The HTTP request.</param><param name="cancellationToken">Cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.AppCredentials.GetTokenAsync(System.Boolean)">
            <summary>
            Gets an OAuth access token.
            </summary>
            <param name="forceRefresh">True to force a refresh of the token; or false to get
            a cached token if it exists.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the task is successful, the result contains the access token string.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.AppCredentials.BuildAuthenticator">
            <summary>
            Builds the lazy <see cref="T:Microsoft.Bot.Connector.Authentication.AdalAuthenticator" /> to be used for token acquisition.
            </summary>
            <returns>A lazy <see cref="T:Microsoft.Bot.Connector.Authentication.AdalAuthenticator"/>.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.AppCredentials.BuildIAuthenticator">
            <summary>
            Builds the lazy <see cref="T:Microsoft.Bot.Connector.Authentication.IAuthenticator" /> to be used for token acquisition.
            </summary>
            <returns>A lazy <see cref="T:Microsoft.Bot.Connector.Authentication.IAuthenticator"/>.</returns>
        </member>
        <member name="T:Microsoft.Bot.Connector.Authentication.AuthenticateRequestResult">
            <summary>
            The result from a call to authenticate a Bot Framework Protocol request.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Authentication.AuthenticateRequestResult.Audience">
            <summary>
            Gets or sets a value for the Audience.
            </summary>
            <value>
            A value for the Audience.
            </value>
        </member>
        <member name="P:Microsoft.Bot.Connector.Authentication.AuthenticateRequestResult.ClaimsIdentity">
            <summary>
            Gets or sets a value for the ClaimsIdentity.
            </summary>
            <value>
            A value for the ClaimsIdentity.
            </value>
        </member>
        <member name="P:Microsoft.Bot.Connector.Authentication.AuthenticateRequestResult.CallerId">
            <summary>
            Gets or sets a value for the CallerId.
            </summary>
            <value>
            A value for the CallerId.
            </value>
        </member>
        <member name="P:Microsoft.Bot.Connector.Authentication.AuthenticateRequestResult.ConnectorFactory">
            <summary>
            Gets or sets a value for the ConnectorFactory.
            </summary>
            <value>
            A value for the ConnectorFactory.
            </value>
        </member>
        <member name="T:Microsoft.Bot.Connector.Authentication.AuthenticationConfiguration">
            <summary>
            General configuration settings for authentication.
            </summary>
            <remarks>
            Note that this is explicitly a class and not an interface,
            since interfaces don't support default values, after the initial release any change would break backwards compatibility.
            </remarks>
        </member>
        <member name="P:Microsoft.Bot.Connector.Authentication.AuthenticationConfiguration.RequiredEndorsements">
            <summary>
            Gets or sets an array of JWT endorsements.
            </summary>
            <value>
            An array of JWT endorsements.
            </value>
        </member>
        <member name="P:Microsoft.Bot.Connector.Authentication.AuthenticationConfiguration.ClaimsValidator">
            <summary>
            Gets or sets an <see cref="P:Microsoft.Bot.Connector.Authentication.AuthenticationConfiguration.ClaimsValidator"/> instance used to validate the identity claims.
            </summary>
            <value>
            An <see cref="P:Microsoft.Bot.Connector.Authentication.AuthenticationConfiguration.ClaimsValidator"/> instance used to validate the identity claims.
            </value>
        </member>
        <member name="P:Microsoft.Bot.Connector.Authentication.AuthenticationConfiguration.ValidTokenIssuers">
            <summary>
            Gets or sets a collection of valid JWT token issuers.
            </summary>
            <value>
            A collection of valid JWT token issuers.
            </value>
        </member>
        <member name="T:Microsoft.Bot.Connector.Authentication.AuthenticationConstants">
            <summary>
            Values and Constants used for Authentication and Authrization by the Bot Framework Protocol.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.AuthenticationConstants.ToChannelFromBotLoginUrl">
             <summary>
             TO CHANNEL FROM BOT: Login URL.
            
             DEPRECATED. For binary compat only.
             </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.AuthenticationConstants.ToChannelFromBotLoginUrlTemplate">
            <summary>
            TO CHANNEL FROM BOT: Login URL template string. Bot developer may specify
            which tenant to obtain an access token from. By default, the channels only
            accept tokens from "botframework.com". For more details see https://aka.ms/bots/tenant-restriction.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.AuthenticationConstants.DefaultChannelAuthTenant">
            <summary>
            The default tenant to acquire bot to channel token from.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.AuthenticationConstants.ToChannelFromBotOAuthScope">
            <summary>
            TO CHANNEL FROM BOT: OAuth scope to request.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.AuthenticationConstants.ToBotFromChannelTokenIssuer">
            <summary>
            TO BOT FROM CHANNEL: Token issuer.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.AuthenticationConstants.OAuthUrl">
            <summary>
            OAuth Url used to get a token from OAuthApiClient.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.AuthenticationConstants.BotOpenIdMetadataKey">
            <summary>
            Application Setting Key for the OpenIdMetadataUrl value.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.AuthenticationConstants.OAuthUrlKey">
            <summary>
            Application Setting Key for the OAuthUrl value.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.AuthenticationConstants.EmulateOAuthCardsKey">
            <summary>
            Application Settings Key for whether to emulate OAuthCards when using the emulator.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.AuthenticationConstants.ToBotFromChannelOpenIdMetadataUrl">
            <summary>
            TO BOT FROM CHANNEL: OpenID metadata document for tokens coming from MSA.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.AuthenticationConstants.ToBotFromEmulatorOpenIdMetadataUrl">
            <summary>
            TO BOT FROM EMULATOR: OpenID metadata document for tokens coming from MSA.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.AuthenticationConstants.ToBotFromEnterpriseChannelOpenIdMetadataUrlFormat">
            <summary>
            TO BOT FROM ENTERPRISE CHANNEL: OpenID metadata document for tokens coming from MSA.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.AuthenticationConstants.ValidTokenIssuerUrlTemplateV1">
            <summary>
            The V1 Azure AD token issuer URL template that will contain the tenant id where the token was issued from.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.AuthenticationConstants.ValidTokenIssuerUrlTemplateV2">
            <summary>
            The V2 Azure AD token issuer URL template that will contain the tenant id where the token was issued from.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.AuthenticationConstants.ValidGovernmentTokenIssuerUrlTemplateV1">
            <summary>
            The Government V1 Azure AD token issuer URL template that will contain the tenant id where the token was issued from.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.AuthenticationConstants.ValidGovernmentTokenIssuerUrlTemplateV2">
            <summary>
            The Government V2 Azure AD token issuer URL template that will contain the tenant id where the token was issued from.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.AuthenticationConstants.AuthorizedParty">
            <summary>
            "azp" Claim.
            Authorized party - the party to which the ID Token was issued.
            This claim follows the general format set forth in the OpenID Spec.
                http://openid.net/specs/openid-connect-core-1_0.html#IDToken.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.AuthenticationConstants.AudienceClaim">
            <summary>
            Audience Claim. From RFC 7519.
                https://tools.ietf.org/html/rfc7519#section-4.1.3
            The "aud" (audience) claim identifies the recipients that the JWT is
            intended for. Each principal intended to process the JWT MUST
            identify itself with a value in the audience claim. If the principal
            processing the claim does not identify itself with a value in the
            "aud" claim when this claim is present, then the JWT MUST be
            rejected. In the general case, the "aud" value is an array of case-
            sensitive strings, each containing a StringOrURI value. In the
            special case when the JWT has one audience, the "aud" value MAY be a
            single case-sensitive string containing a StringOrURI value. The
            interpretation of audience values is generally application specific.
            Use of this claim is OPTIONAL.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.AuthenticationConstants.KeyIdHeader">
            <summary>
            From RFC 7515
                https://tools.ietf.org/html/rfc7515#section-4.1.4
            The "kid" (key ID) Header Parameter is a hint indicating which key
            was used to secure the JWS. This parameter allows originators to
            explicitly signal a change of key to recipients. The structure of
            the "kid" value is unspecified. Its value MUST be a case-sensitive
            string. Use of this Header Parameter is OPTIONAL.
            When used with a JWK, the "kid" value is used to match a JWK "kid"
            parameter value.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.AuthenticationConstants.VersionClaim">
            <summary>
            Token version claim name. As used in Microsoft AAD tokens.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.AuthenticationConstants.AppIdClaim">
            <summary>
            App ID claim name. As used in Microsoft AAD 1.0 tokens.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.AuthenticationConstants.ServiceUrlClaim">
            <summary>
            Service URL claim name. As used in Microsoft Bot Framework v3.1 auth.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.AuthenticationConstants.AnonymousSkillAppId">
            <summary>
            AppId used for creating skill claims when there is no appId and password configured.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.AuthenticationConstants.AnonymousAuthType">
            <summary>
            Indicates that <see cref="P:System.Security.Claims.ClaimsIdentity.AuthenticationType"/> is anonymous (no app Id and password were provided).
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.AuthenticationConstants.AllowedSigningAlgorithms">
            <summary>
            Allowed token signing algorithms. Tokens come from channels to the bot. The code
            that uses this also supports tokens coming from the emulator.
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.Authentication.AuthenticatorResult">
            <summary>
            Represents the result of an authentication process. Includes a security token and its expiration time.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Authentication.AuthenticatorResult.AccessToken">
            <summary>
            Gets or sets the value of the access token resulting from an authentication process.
            </summary>
            <value>
            The value of the access token resulting from an authentication process.
            </value>
        </member>
        <member name="P:Microsoft.Bot.Connector.Authentication.AuthenticatorResult.ExpiresOn">
            <summary>
            Gets or sets the date and time of expiration relative to Coordinated Universal Time (UTC).
            </summary>
            <value>
            The date and time of expiration relative to Coordinated Universal Time (UTC).
            </value>
        </member>
        <member name="T:Microsoft.Bot.Connector.Authentication.BotFrameworkAuthentication">
            <summary>
            Represents a Cloud Environment used to authenticate Bot Framework Protocol network calls within this environment.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.BotFrameworkAuthentication.AuthenticateRequestAsync(Microsoft.Bot.Schema.Activity,System.String,System.Threading.CancellationToken)">
            <summary>
            Validate Bot Framework Protocol requests.
            </summary>
            <param name="activity">The inbound Activity.</param>
            <param name="authHeader">The http auth header.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>Asynchronous Task with <see cref="T:Microsoft.Bot.Connector.Authentication.AuthenticateRequestResult"/>.</returns>
            <exception cref="T:System.UnauthorizedAccessException">If the validation returns false.</exception>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.BotFrameworkAuthentication.AuthenticateStreamingRequestAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Validate Bot Framework Protocol requests.
            </summary>
            <param name="authHeader">The http auth header.</param>
            <param name="channelIdHeader">The channel Id HTTP header.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>Asynchronous Task with <see cref="T:Microsoft.Bot.Connector.Authentication.AuthenticateRequestResult"/>.</returns>
            <exception cref="T:System.UnauthorizedAccessException">If the validation returns false.</exception>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.BotFrameworkAuthentication.CreateConnectorFactory(System.Security.Claims.ClaimsIdentity)">
            <summary>
            Creates a <see cref="T:Microsoft.Bot.Connector.Authentication.ConnectorFactory"/> that can be used to create <see cref="T:Microsoft.Bot.Connector.IConnectorClient"/> that use credentials from this particular cloud environment.
            </summary>
            <param name="claimsIdentity">The inbound <see cref="T:Microsoft.Bot.Schema.Activity"/>'s <see cref="T:System.Security.Claims.ClaimsIdentity"/>.</param>
            <returns>A <see cref="T:Microsoft.Bot.Connector.Authentication.ConnectorFactory"/>.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.BotFrameworkAuthentication.CreateUserTokenClientAsync(System.Security.Claims.ClaimsIdentity,System.Threading.CancellationToken)">
            <summary>
            Creates the appropriate <see cref="T:Microsoft.Bot.Connector.Authentication.UserTokenClient" /> instance.
            </summary>
            <param name="claimsIdentity">The inbound <see cref="T:Microsoft.Bot.Schema.Activity"/>'s <see cref="T:System.Security.Claims.ClaimsIdentity"/>.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>Asynchronous Task with <see cref="T:Microsoft.Bot.Connector.Authentication.UserTokenClient" /> instance.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.BotFrameworkAuthentication.CreateBotFrameworkClient">
            <summary>
            Creates a <see cref="T:Microsoft.Bot.Builder.Skills.BotFrameworkClient"/> used for calling Skills.
            </summary>
            <returns>A <see cref="T:Microsoft.Bot.Builder.Skills.BotFrameworkClient"/> instance to call Skills.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.BotFrameworkAuthentication.GetOriginatingAudience">
            <summary>
            Gets the originating audience from Bot OAuth scope.
            </summary>
            <returns>The originating audience.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.BotFrameworkAuthentication.AuthenticateChannelRequestAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Authenticate Bot Framework Protocol requests to Skills.
            </summary>
            <param name="authHeader">The http auth header received in the skill request.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>Asynchronous Task with <see cref="T:System.Security.Claims.ClaimsIdentity"/>.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.BotFrameworkAuthentication.GenerateCallerIdAsync(Microsoft.Bot.Connector.Authentication.ServiceClientCredentialsFactory,System.Security.Claims.ClaimsIdentity,System.String,System.Threading.CancellationToken)">
            <summary>
            Generates the appropriate callerId to write onto the activity, this might be null.
            </summary>
            <param name="credentialFactory">A <see cref="T:Microsoft.Bot.Connector.Authentication.ServiceClientCredentialsFactory"/> to use.</param>
            <param name="claimsIdentity">The inbound claims.</param>
            <param name="callerId">The default callerId to use if this is not a skill.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>The callerId, this might be null.</returns>
        </member>
        <member name="T:Microsoft.Bot.Connector.Authentication.BotFrameworkAuthenticationFactory">
            <summary>
            A factory for <see cref="T:Microsoft.Bot.Connector.Authentication.BotFrameworkAuthentication" /> which encapsulate the environment specific Bot Framework Protocol auth code.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.BotFrameworkAuthenticationFactory.Create">
            <summary>
            Creates the a <see cref="T:Microsoft.Bot.Connector.Authentication.BotFrameworkAuthentication" /> instance for anonymous testing scenarios.
            </summary>
            <returns>A new <see cref="T:Microsoft.Bot.Connector.Authentication.BotFrameworkAuthentication" /> instance.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.BotFrameworkAuthenticationFactory.Create(System.String,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String,System.String,Microsoft.Bot.Connector.Authentication.ServiceClientCredentialsFactory,Microsoft.Bot.Connector.Authentication.AuthenticationConfiguration,System.Net.Http.IHttpClientFactory,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Creates the appropriate <see cref="T:Microsoft.Bot.Connector.Authentication.BotFrameworkAuthentication" /> instance.
            </summary>
            <param name="channelService">The Channel Service.</param>
            <param name="validateAuthority">The validate authority value to use.</param>
            <param name="toChannelFromBotLoginUrl">The to Channel from bot login url.</param>
            <param name="toChannelFromBotOAuthScope">The to Channel from bot oauth scope.</param>
            <param name="toBotFromChannelTokenIssuer">The to bot from Channel Token Issuer.</param>
            <param name="oAuthUrl">The oAuth url.</param>
            <param name="toBotFromChannelOpenIdMetadataUrl">The to bot from Channel Open Id Metadata url.</param>
            <param name="toBotFromEmulatorOpenIdMetadataUrl">The to bot from Emulator Open Id Metadata url.</param>
            <param name="callerId">The Microsoft app password.</param>
            <param name="credentialFactory">The <see cref="T:Microsoft.Bot.Connector.Authentication.ServiceClientCredentialsFactory" /> to use to create credentials.</param>
            <param name="authConfiguration">The <see cref="T:Microsoft.Bot.Connector.Authentication.AuthenticationConfiguration" /> to use.</param>
            <param name="httpClientFactory">The <see cref="T:System.Net.Http.IHttpClientFactory" /> to use.</param>
            <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger" /> to use.</param>
            <returns>A new <see cref="T:Microsoft.Bot.Connector.Authentication.BotFrameworkAuthentication" /> instance.</returns>
        </member>
        <member name="T:Microsoft.Bot.Connector.Authentication.BuiltinBotFrameworkAuthentication">
            <summary>
            Note regarding porting to other languages.
            
            This INTERNAL code leverages the existing auth implementation in the .NET repo. Ultimately, the "parameterized"
            version of this code can do everything this code does. In the future this "buildin" implementation will be
            replaced with the "parameterized" version appropriately parameterized with the builtin constants.
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.Authentication.CertificateAppCredentials">
            <summary>
            CertificateAppCredentials auth implementation and cache.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.CertificateAppCredentials.#ctor(Microsoft.Bot.Connector.Authentication.CertificateAppCredentialsOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.Authentication.CertificateAppCredentials"/> class.
            </summary>
            <param name="options">Options for this CertificateAppCredentials.</param>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.CertificateAppCredentials.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,System.String,System.String,System.Net.Http.HttpClient,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.Authentication.CertificateAppCredentials"/> class.
            </summary>
            <param name="clientCertificate">Client certificate to be presented for authentication.</param>
            <param name="appId">Microsoft application Id related to the certifiacte.</param>
            <param name="channelAuthTenant">Optional. The oauth token tenant.</param>
            <param name="customHttpClient">Optional <see cref="T:System.Net.Http.HttpClient"/> to be used when acquiring tokens.</param>
            <param name="logger">Optional <see cref="T:Microsoft.Extensions.Logging.ILogger"/> to gather telemetry data while acquiring and managing credentials.</param>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.CertificateAppCredentials.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Boolean,System.String,System.String,System.Net.Http.HttpClient,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.Authentication.CertificateAppCredentials"/> class.
            </summary>
            <param name="clientCertificate">Client certificate to be presented for authentication.</param>
            <param name="sendX5c">This parameter, if true, enables application developers to achieve easy certificates roll-over in Azure AD: setting this parameter to true will send the public certificate to Azure AD along with the token request, so that Azure AD can use it to validate the subject name based on a trusted issuer policy. </param>
            <param name="appId">Microsoft application Id related to the certifiacte.</param>
            <param name="channelAuthTenant">Optional. The oauth token tenant.</param>
            <param name="customHttpClient">Optional <see cref="T:System.Net.Http.HttpClient"/> to be used when acquiring tokens.</param>
            <param name="logger">Optional <see cref="T:Microsoft.Extensions.Logging.ILogger"/> to gather telemetry data while acquiring and managing credentials.</param>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.CertificateAppCredentials.#ctor(Microsoft.IdentityModel.Clients.ActiveDirectory.ClientAssertionCertificate,System.String,System.Net.Http.HttpClient,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.Authentication.CertificateAppCredentials"/> class.
            </summary>
            <param name="clientCertificate">Client certificate to be presented for authentication.</param>
            <param name="channelAuthTenant">Optional. The oauth token tenant.</param>
            <param name="customHttpClient">Optional <see cref="T:System.Net.Http.HttpClient"/> to be used when acquiring tokens.</param>
            <param name="logger">Optional <see cref="T:Microsoft.Extensions.Logging.ILogger"/> to gather telemetry data while acquiring and managing credentials.</param>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.CertificateAppCredentials.#ctor(Microsoft.IdentityModel.Clients.ActiveDirectory.ClientAssertionCertificate,System.Boolean,System.String,System.Net.Http.HttpClient,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.Authentication.CertificateAppCredentials"/> class.
            </summary>
            <param name="clientCertificate">Client certificate to be presented for authentication.</param>
            <param name="sendX5c">This parameter, if true, enables application developers to achieve easy certificates roll-over in Azure AD: setting this parameter to true will send the public certificate to Azure AD along with the token request, so that Azure AD can use it to validate the subject name based on a trusted issuer policy. </param>
            <param name="channelAuthTenant">Optional. The oauth token tenant.</param>
            <param name="customHttpClient">Optional <see cref="T:System.Net.Http.HttpClient"/> to be used when acquiring tokens.</param>
            <param name="logger">Optional <see cref="T:Microsoft.Extensions.Logging.ILogger"/> to gather telemetry data while acquiring and managing credentials.</param>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.CertificateAppCredentials.BuildAuthenticator">
            <summary>
            Builds the lazy <see cref="T:Microsoft.Bot.Connector.Authentication.AdalAuthenticator" /> to be used for token acquisition.
            </summary>
            <returns>A lazy <see cref="T:Microsoft.Bot.Connector.Authentication.AdalAuthenticator"/>.</returns>
        </member>
        <member name="T:Microsoft.Bot.Connector.Authentication.CertificateAppCredentialsOptions">
            <summary>
            CertificateAppCredentials Options.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Authentication.CertificateAppCredentialsOptions.ClientCertificate">
            <summary>
            Gets or sets the X509Certificate2 ClientCertificate.
            </summary>
            <value>
            ClientCertificate.
            </value>
        </member>
        <member name="P:Microsoft.Bot.Connector.Authentication.CertificateAppCredentialsOptions.AppId">
            <summary>
            Gets or sets the AppId.
            </summary>
            <value>
            AppId.
            </value>
        </member>
        <member name="P:Microsoft.Bot.Connector.Authentication.CertificateAppCredentialsOptions.ChannelAuthTenant">
            <summary>
            Gets or sets the Channel Auth Tenant.
            </summary>
            <value>
            ChannelAuthTenant.
            </value>
        </member>
        <member name="P:Microsoft.Bot.Connector.Authentication.CertificateAppCredentialsOptions.OauthScope">
            <summary>
            Gets or sets the OauthScope.
            </summary>
            <value>
            OauthScope.
            </value>
        </member>
        <member name="P:Microsoft.Bot.Connector.Authentication.CertificateAppCredentialsOptions.CustomHttpClient">
            <summary>
            Gets or sets the CustomHttpClient.
            </summary>
            <value>
            CustomHttpClient.
            </value>
        </member>
        <member name="P:Microsoft.Bot.Connector.Authentication.CertificateAppCredentialsOptions.Logger">
            <summary>
            Gets or sets the Logger.
            </summary>
            <value>
            Logger.
            </value>
        </member>
        <member name="P:Microsoft.Bot.Connector.Authentication.CertificateAppCredentialsOptions.SendX5c">
            <summary>
            Gets or sets a value indicating whether this parameter, if true,
            enables application developers to achieve easy certificates roll-over
            in Azure AD: setting this parameter to true will send the public 
            certificate to Azure AD along with the token request, so that
            Azure AD can use it to validate the subject name based on a trusted issuer policy.
            </summary>
            <value>
            SendX5c if true.
            </value>
        </member>
        <member name="T:Microsoft.Bot.Connector.Authentication.ChannelValidation">
            <summary>
            Validates JWT tokens sent from Azure.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.ChannelValidation.ToBotFromChannelTokenValidationParameters">
            <summary>
            TO BOT FROM CHANNEL: Token validation parameters when connecting to a bot.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Authentication.ChannelValidation.OpenIdMetadataUrl">
            <summary>
            Gets or sets the default endpoint that is used for Open ID Metadata requests.
            </summary>
            <value>
            The default endpoint that is used for Open ID Metadata requests.
            </value>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.ChannelValidation.AuthenticateChannelToken(System.String,Microsoft.Bot.Connector.Authentication.ICredentialProvider,System.Net.Http.HttpClient,System.String)">
            <summary>
            Validate the incoming Auth Header as a token sent from the Bot Framework Service.
            </summary>
            <remarks>
            A token issued by the Bot Framework emulator will FAIL this check.
            </remarks>
            <param name="authHeader">The raw HTTP header in the format: "Bearer [longString]".</param>
            <param name="credentials">The user defined set of valid credentials, such as the AppId.</param>
            <param name="httpClient">Authentication of tokens requires calling out to validate Endorsements and related documents. The
            HttpClient is used for making those calls. Those calls generally require TLS connections, which are expensive to
            setup and teardown, so a shared HttpClient is recommended.</param>
            <param name="channelId">The ID of the channel to validate.</param>
            <returns>
            A valid ClaimsIdentity.
            </returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.ChannelValidation.AuthenticateChannelToken(System.String,Microsoft.Bot.Connector.Authentication.ICredentialProvider,System.Net.Http.HttpClient,System.String,Microsoft.Bot.Connector.Authentication.AuthenticationConfiguration)">
            <summary>
            Validate the incoming Auth Header as a token sent from the Bot Framework Service.
            </summary>
            <remarks>
            A token issued by the Bot Framework emulator will FAIL this check.
            </remarks>
            <param name="authHeader">The raw HTTP header in the format: "Bearer [longString]".</param>
            <param name="credentials">The user defined set of valid credentials, such as the AppId.</param>
            <param name="httpClient">Authentication of tokens requires calling out to validate Endorsements and related documents. The
            HttpClient is used for making those calls. Those calls generally require TLS connections, which are expensive to
            setup and teardown, so a shared HttpClient is recommended.</param>
            <param name="channelId">The ID of the channel to validate.</param>
            <param name="authConfig">The authentication configuration.</param>
            <returns>
            A valid ClaimsIdentity.
            </returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.ChannelValidation.AuthenticateChannelToken(System.String,Microsoft.Bot.Connector.Authentication.ICredentialProvider,System.String,System.Net.Http.HttpClient,System.String)">
            <summary>
            Validate the incoming Auth Header as a token sent from the Bot Framework Service.
            </summary>
            <param name="authHeader">The raw HTTP header in the format: "Bearer [longString]".</param>
            <param name="credentials">The user defined set of valid credentials, such as the AppId.</param>
            <param name="serviceUrl">Service url.</param>
            <param name="httpClient">Authentication of tokens requires calling out to validate Endorsements and related documents. The
            HttpClient is used for making those calls. Those calls generally require TLS connections, which are expensive to
            setup and teardown, so a shared HttpClient is recommended.</param>
            <param name="channelId">The ID of the channel to validate.</param>
            <returns>ClaimsIdentity.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.ChannelValidation.AuthenticateChannelToken(System.String,Microsoft.Bot.Connector.Authentication.ICredentialProvider,System.String,System.Net.Http.HttpClient,System.String,Microsoft.Bot.Connector.Authentication.AuthenticationConfiguration)">
            <summary>
            Validate the incoming Auth Header as a token sent from the Bot Framework Service.
            </summary>
            <param name="authHeader">The raw HTTP header in the format: "Bearer [longString]".</param>
            <param name="credentials">The user defined set of valid credentials, such as the AppId.</param>
            <param name="serviceUrl">Service url.</param>
            <param name="httpClient">Authentication of tokens requires calling out to validate Endorsements and related documents. The
            HttpClient is used for making those calls. Those calls generally require TLS connections, which are expensive to
            setup and teardown, so a shared HttpClient is recommended.</param>
            <param name="channelId">The ID of the channel to validate.</param>
            <param name="authConfig">The authentication configuration.</param>
            <returns>ClaimsIdentity.</returns>
        </member>
        <member name="T:Microsoft.Bot.Connector.Authentication.ClaimsValidator">
            <summary>
            An interface used to validate identity <see cref="T:System.Security.Claims.Claim"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.ClaimsValidator.ValidateClaimsAsync(System.Collections.Generic.IList{System.Security.Claims.Claim})">
            <summary>
            Validates a list of <see cref="T:System.Security.Claims.Claim"/> and should throw an exception if the validation fails.
            </summary>
            <param name="claims">The list of claims to validate.</param>
            <returns>true if the validation is successful, false if not.</returns>
            <exception cref="T:System.UnauthorizedAccessException">Throw this exception if the validation fails.</exception>
        </member>
        <member name="T:Microsoft.Bot.Connector.Authentication.ConnectorFactory">
            <summary>
            A factory class used to create ConnectorClients with appropriate credentials for the current appId.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.ConnectorFactory.CreateAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            A factory method used to create <see cref="T:Microsoft.Bot.Connector.IConnectorClient"/> instances.
            </summary>
            <param name="serviceUrl">The url for the client.</param>
            <param name="audience">The audience for the credentials the client will use.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>A Task of <see cref="T:Microsoft.Bot.Connector.IConnectorClient"/>.</returns>
        </member>
        <member name="T:Microsoft.Bot.Connector.Authentication.ConstantHttpClientFactory">
            <summary>
            HttpClientFactory that always returns the same HttpClient instance for ADAL AcquireTokenAsync calls.
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.Authentication.DelegatingCredentialProvider">
            <summary>
            This is just an internal class to allow pre-existing implementation of the request validation to be used with a IServiceClientCredentialFactory.
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.Authentication.EmulatorValidation">
            <summary>
            Validates and Examines JWT tokens from the Bot Framework Emulator.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.EmulatorValidation.ToBotFromEmulatorTokenValidationParameters">
            <summary>
            TO BOT FROM EMULATOR: Token validation parameters when connecting to a channel.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.EmulatorValidation.IsTokenFromEmulator(System.String)">
            <summary>
            Determines if a given Auth header is from the Bot Framework Emulator.
            </summary>
            <param name="authHeader">Bearer Token, in the "Bearer [Long String]" Format.</param>
            <returns>True, if the token was issued by the Emulator. Otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.EmulatorValidation.AuthenticateEmulatorToken(System.String,Microsoft.Bot.Connector.Authentication.ICredentialProvider,Microsoft.Bot.Connector.Authentication.IChannelProvider,System.Net.Http.HttpClient,System.String)">
            <summary>
            Validate the incoming Auth Header as a token sent from the Bot Framework Emulator.
            </summary>
            <param name="authHeader">The raw HTTP header in the format: "Bearer [longString]".</param>
            <param name="credentials">The user defined set of valid credentials, such as the AppId.</param>
            <param name="channelProvider">The channelService value that distinguishes public Azure from US Government Azure.</param>
            <param name="httpClient">Authentication of tokens requires calling out to validate Endorsements and related documents. The
            HttpClient is used for making those calls. Those calls generally require TLS connections, which are expensive to
            setup and teardown, so a shared HttpClient is recommended.</param>
            <param name="channelId">The ID of the channel to validate.</param>
            <returns>
            A valid ClaimsIdentity.
            </returns>
            <remarks>
            A token issued by the Bot Framework will FAIL this check. Only Emulator tokens will pass.
            </remarks>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.EmulatorValidation.AuthenticateEmulatorToken(System.String,Microsoft.Bot.Connector.Authentication.ICredentialProvider,Microsoft.Bot.Connector.Authentication.IChannelProvider,System.Net.Http.HttpClient,System.String,Microsoft.Bot.Connector.Authentication.AuthenticationConfiguration)">
            <summary>
            Validate the incoming Auth Header as a token sent from the Bot Framework Emulator.
            </summary>
            <param name="authHeader">The raw HTTP header in the format: "Bearer [longString]".</param>
            <param name="credentials">The user defined set of valid credentials, such as the AppId.</param>
            <param name="channelProvider">The channelService value that distinguishes public Azure from US Government Azure.</param>
            <param name="httpClient">Authentication of tokens requires calling out to validate Endorsements and related documents. The
            HttpClient is used for making those calls. Those calls generally require TLS connections, which are expensive to
            setup and teardown, so a shared HttpClient is recommended.</param>
            <param name="channelId">The ID of the channel to validate.</param>
            <param name="authConfig">The authentication configuration.</param>
            <returns>
            A valid ClaimsIdentity.
            </returns>
            <remarks>
            A token issued by the Bot Framework will FAIL this check. Only Emulator tokens will pass.
            </remarks>
        </member>
        <member name="T:Microsoft.Bot.Connector.Authentication.EndorsementsRetriever">
            <summary>
            The endorsements property within each key contains one or more endorsement
            strings which you can use to verify that the channel ID specified in the channelId
            property within the Activity object of the incoming request is authentic.
            More details at:
                https://docs.microsoft.com/bot-framework/rest-api/bot-framework-rest-connector-authentication.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.EndorsementsRetriever.JsonWebKeySetUri">
            <summary>
            JSON Web Key Set Metadata value
            From the OpenID Spec at
                https://openid.net/specs/openid-connect-discovery-1_0.html
                URL of the OP's JSON Web Key Set [JWK] document. This contains the signing key(s)
                the RP uses to validate signatures from the OP. The JWK Set MAY also contain the
                Server's encryption key(s), which are used by RPs to encrypt requests to the
                Server. When both signing and encryption keys are made available, a use (Key Use)
                parameter value is REQUIRED for all keys in the referenced JWK Set to indicate
                each key's intended usage. Although some algorithms allow the same key to be
                used for both signatures and encryption, doing so is NOT RECOMMENDED, as it
                is less secure. The JWK x5c parameter MAY be used to provide X.509 representations
                of keys provided. When used, the bare key values MUST still be present and MUST
                match those in the certificate.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.EndorsementsRetriever.#ctor(System.Net.Http.HttpClient)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.Authentication.EndorsementsRetriever"/> class.
            </summary>
            <param name="httpClient">Allow the calling layer to manage the lifetime of the HttpClient, complete with
            timeouts, pooling, instancing and so on. This is to avoid having to Use/Dispose a new instance
            of the client on each call, which may be very expensive in terms of latency, TLS connections
            and related issues.</param>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.EndorsementsRetriever.GetConfigurationAsync(System.String,Microsoft.IdentityModel.Protocols.IDocumentRetriever,System.Threading.CancellationToken)">
            <summary>
            Retrieves a populated configuration given an address and a document retriever.
            </summary>
            <param name="address">Address of the discovery document.</param>
            <param name="retriever">The document retriever to use to read the discovery document.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the activities are successfully sent, the task result contains
            a populated configuration.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.EndorsementsRetriever.GetDocumentAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Obtains a document from an address.
            </summary>
            <param name="address">location of document.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the activities are successfully sent, the task result contains
            the document as a string.</remarks>
        </member>
        <member name="T:Microsoft.Bot.Connector.Authentication.EndorsementsValidator">
            <summary>
            Contains helper methods for verifying JWT endorsements.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.EndorsementsValidator.Validate(System.String,System.Collections.Generic.HashSet{System.String})">
            <summary>
            Verify that the specified endorsement exists on the JWT token. Call this method multiple times to validate multiple endorsements.
            For example, if an <see cref="T:Microsoft.Bot.Schema.Activity"/> comes from WebChat, that activity's
            <see cref="P:Microsoft.Bot.Schema.Activity.ChannelId"/> property is set to "webchat" and the signing party
            of the JWT token must have a corresponding endorsement of “Webchat”.
            </summary>
            <remarks>
            JWT token signing keys contain endorsements matching the IDs of the channels they are approved to sign for.
            They also contain keywords representing compliance certifications. This code ensures that a channel ID or compliance
            certification is present on the signing key used for the request's token.
            </remarks>
            <param name="expectedEndorsement">The expected endorsement. Generally the ID of the channel to validate, typically extracted from the activity's
            <see cref="P:Microsoft.Bot.Schema.Activity.ChannelId"/> property, that to which the Activity is affinitized. Alternatively, it could represent a compliance certification that is required.</param>
            <param name="endorsements">The JWT token’s signing party is permitted to send activities only for
            specific channels. That list, the set of channels the service can sign for, is called the endorsement list.
            The activity’s <see cref="P:Microsoft.Bot.Schema.Activity.ChannelId"/> MUST be found in the endorsement list, or the incoming
            activity is not considered valid.</param>
            <returns>True if the channel ID is found in the endorsements list; otherwise, false.</returns>
        </member>
        <member name="T:Microsoft.Bot.Connector.Authentication.EnterpriseChannelValidation">
            <summary>
            Validates JWT tokens from an enterprise channel.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.EnterpriseChannelValidation.ToBotFromEnterpriseChannelTokenValidationParameters">
            <summary>
            TO BOT FROM ENTERPRISE CHANNEL: Token validation parameters when connecting to a bot.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.EnterpriseChannelValidation.AuthenticateChannelToken(System.String,Microsoft.Bot.Connector.Authentication.ICredentialProvider,Microsoft.Bot.Connector.Authentication.IChannelProvider,System.String,System.Net.Http.HttpClient,System.String)">
            <summary>
            Validate the incoming Auth Header as a token sent from a Bot Framework Channel Service.
            </summary>
            <param name="authHeader">The raw HTTP header in the format: "Bearer [longString]".</param>
            <param name="credentials">The user defined set of valid credentials, such as the AppId.</param>
            <param name="channelProvider">The user defined configuration for the channel.</param>
            <param name="serviceUrl">The service url from the request.</param>
            <param name="httpClient">Authentication of tokens requires calling out to validate Endorsements and related documents. The
            HttpClient is used for making those calls. Those calls generally require TLS connections, which are expensive to
            setup and teardown, so a shared HttpClient is recommended.</param>
            <param name="channelId">The ID of the channel to validate.</param>
            <returns>ClaimsIdentity.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.EnterpriseChannelValidation.AuthenticateChannelToken(System.String,Microsoft.Bot.Connector.Authentication.ICredentialProvider,Microsoft.Bot.Connector.Authentication.IChannelProvider,System.String,System.Net.Http.HttpClient,System.String,Microsoft.Bot.Connector.Authentication.AuthenticationConfiguration)">
            <summary>
            Validate the incoming Auth Header as a token sent from a Bot Framework Channel Service.
            </summary>
            <param name="authHeader">The raw HTTP header in the format: "Bearer [longString]".</param>
            <param name="credentials">The user defined set of valid credentials, such as the AppId.</param>
            <param name="channelProvider">The user defined configuration for the channel.</param>
            <param name="serviceUrl">The service url from the request.</param>
            <param name="httpClient">Authentication of tokens requires calling out to validate Endorsements and related documents. The
            HttpClient is used for making those calls. Those calls generally require TLS connections, which are expensive to
            setup and teardown, so a shared HttpClient is recommended.</param>
            <param name="channelId">The ID of the channel to validate.</param>
            <param name="authConfig">The authentication configuration.</param>
            <returns>ClaimsIdentity.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.EnterpriseChannelValidation.ValidateIdentity(System.Security.Claims.ClaimsIdentity,Microsoft.Bot.Connector.Authentication.ICredentialProvider,System.String)">
            <summary>
            Validates a <see cref="T:System.Security.Claims.ClaimsIdentity"/> object against the credentials and service URL provided.
            </summary>
            <param name="identity">The identity to validate.</param>
            <param name="credentials">The credentials to use for validation.</param>
            <param name="serviceUrl">The service URL to validate.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the result of the asynchronous operation.</returns>
        </member>
        <member name="T:Microsoft.Bot.Connector.Authentication.GovernmentAuthenticationConstants">
            <summary>
            Values and Constants used for Authentication and Authorization by the Bot Framework Protocol to US Government DataCenters.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.GovernmentAuthenticationConstants.ChannelService">
            <summary>
            Government Channel Service property value.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.GovernmentAuthenticationConstants.ToChannelFromBotLoginUrl">
            <summary>
            TO GOVERNMENT CHANNEL FROM BOT: Login URL.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.GovernmentAuthenticationConstants.ToChannelFromBotOAuthScope">
            <summary>
            TO GOVERNMENT CHANNEL FROM BOT: OAuth scope to request.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.GovernmentAuthenticationConstants.ToBotFromChannelTokenIssuer">
            <summary>
            TO BOT FROM GOVERNMENT CHANNEL: Token issuer.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.GovernmentAuthenticationConstants.OAuthUrlGov">
            <summary>
            OAuth Url used to get a token from OAuthApiClient.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.GovernmentAuthenticationConstants.ToBotFromChannelOpenIdMetadataUrl">
            <summary>
            TO BOT FROM GOVERNMANT CHANNEL: OpenID metadata document for tokens coming from MSA.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.GovernmentAuthenticationConstants.ToBotFromEmulatorOpenIdMetadataUrl">
            <summary>
            TO BOT FROM GOVERNMENT EMULATOR: OpenID metadata document for tokens coming from MSA.
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.Authentication.GovernmentChannelValidation">
            <summary>
            Valies JWT tokens from a Government channel.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.GovernmentChannelValidation.ToBotFromGovernmentChannelTokenValidationParameters">
            <summary>
            TO BOT FROM GOVERNMENT CHANNEL: Token validation parameters when connecting to a bot.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Authentication.GovernmentChannelValidation.OpenIdMetadataUrl">
            <summary>
            Gets or sets the metadata address.
            </summary>
            <value>
            The metadata address.
            </value>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.GovernmentChannelValidation.AuthenticateChannelToken(System.String,Microsoft.Bot.Connector.Authentication.ICredentialProvider,System.String,System.Net.Http.HttpClient,System.String)">
            <summary>
            Validate the incoming Auth Header as a token sent from a Bot Framework Government Channel Service.
            </summary>
            <param name="authHeader">The raw HTTP header in the format: "Bearer [longString]".</param>
            <param name="credentials">The user defined set of valid credentials, such as the AppId.</param>
            <param name="serviceUrl">The service url from the request.</param>
            <param name="httpClient">Authentication of tokens requires calling out to validate Endorsements and related documents. The
            HttpClient is used for making those calls. Those calls generally require TLS connections, which are expensive to
            setup and teardown, so a shared HttpClient is recommended.</param>
            <param name="channelId">The ID of the channel to validate.</param>
            <returns>ClaimsIdentity.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.GovernmentChannelValidation.AuthenticateChannelToken(System.String,Microsoft.Bot.Connector.Authentication.ICredentialProvider,System.String,System.Net.Http.HttpClient,System.String,Microsoft.Bot.Connector.Authentication.AuthenticationConfiguration)">
            <summary>
            Validate the incoming Auth Header as a token sent from a Bot Framework Government Channel Service.
            </summary>
            <param name="authHeader">The raw HTTP header in the format: "Bearer [longString]".</param>
            <param name="credentials">The user defined set of valid credentials, such as the AppId.</param>
            <param name="serviceUrl">The service url from the request.</param>
            <param name="httpClient">Authentication of tokens requires calling out to validate Endorsements and related documents. The
            HttpClient is used for making those calls. Those calls generally require TLS connections, which are expensive to
            setup and teardown, so a shared HttpClient is recommended.</param>
            <param name="channelId">The ID of the channel to validate.</param>
            <param name="authConfig">The authentication configuration.</param>
            <returns>ClaimsIdentity.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.GovernmentChannelValidation.ValidateIdentity(System.Security.Claims.ClaimsIdentity,Microsoft.Bot.Connector.Authentication.ICredentialProvider,System.String)">
            <summary>
            Validate the ClaimsIdentity as sent from a Bot Framework Government Channel Service.
            </summary>
            <param name="identity">The claims identity to validate.</param>
            <param name="credentials">The user defined set of valid credentials, such as the AppId.</param>
            <param name="serviceUrl">The service url from the request.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="T:Microsoft.Bot.Connector.Authentication.IAuthenticator">
            <summary>
            Contract for authentication classes that retrieve authentication tokens.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.IAuthenticator.GetTokenAsync(System.Boolean)">
            <summary>
            Acquires the security token.
            </summary>
            <param name="forceRefresh">Tells the method to acquire a new token regardless of expiration.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> object.</returns>
        </member>
        <member name="T:Microsoft.Bot.Connector.Authentication.IChannelProvider">
            <summary>
            ChannelProvider interface. This interface allows Bots to provide their own
            implementation for the configuration parameters to connect to a Bot.
            Framework channel service.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.IChannelProvider.GetChannelServiceAsync">
            <summary>
            Gets the channel service property for this channel provider.
            </summary>
            <returns>The channel service property for the channel provider.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.IChannelProvider.IsGovernment">
            <summary>
            Gets a value of whether this provider represents a channel on Government Azure.
            </summary>
            <returns>True if this channel provider represents a channel on Government Azure.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.IChannelProvider.IsPublicAzure">
            <summary>
            Gets a value of whether this provider represents a channel on Public Azure.
            </summary>
            <returns>True if this channel provider represents a channel on Public Azure.</returns>
        </member>
        <member name="T:Microsoft.Bot.Connector.Authentication.ICredentialProvider">
             <summary>
             CredentialProvider interface. This interface allows Bots to provide their own
             implementation of what is, and what is not, a valid appId and password. This is
             useful in the case of multi-tenant bots, where the bot may need to call
             out to a service to determine if a particular appid/password pair
             is valid.
            
             For Single Tenant bots (the vast majority) the simple static providers
             are sufficient.
             </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.ICredentialProvider.IsValidAppIdAsync(System.String)">
            <summary>
            Validates an app ID.
            </summary>
            <param name="appId">The app ID to validate.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the task is successful, the result is true if <paramref name="appId"/>
            is valid for the controller; otherwise, false.
            <para>
            This method is async to enable custom implementations
            that may need to call out to serviced to validate the appId / password pair.
            </para></remarks>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.ICredentialProvider.GetAppPasswordAsync(System.String)">
            <summary>
            Gets the app password for a given bot app ID.
            </summary>
            <param name="appId">The ID of the app to get the password for.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the task is successful and the app ID is valid, the result
            contains the password; otherwise, null.
            <para>
            This method is async to enable custom implementations
            that may need to call out to serviced to validate the appId / password pair.
            </para></remarks>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.ICredentialProvider.IsAuthenticationDisabledAsync">
            <summary>
            Checks whether bot authentication is disabled.
            </summary>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the task is successful and bot authentication is disabled, the result
            is true; otherwise, false.
            <para>
            This method is async to enable custom implementations
            that may need to call out to serviced to validate the appId / password pair.
            </para></remarks>
        </member>
        <member name="T:Microsoft.Bot.Connector.Authentication.IJwtTokenProviderFactory">
            <summary>
            A factory that can create OAuth token providers for generating JWT auth tokens.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.IJwtTokenProviderFactory.CreateAzureServiceTokenProvider(System.String,System.Net.Http.HttpClient)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.Azure.Services.AppAuthentication.AzureServiceTokenProvider"/> class.
            </summary>
            <param name="appId">Client id for the managed identity to be used for acquiring tokens.</param>
            <param name="customHttpClient">A customized instance of the HttpClient class.</param>
            <returns>A new instance of the <see cref="T:Microsoft.Azure.Services.AppAuthentication.AzureServiceTokenProvider"/> class.</returns>
        </member>
        <member name="T:Microsoft.Bot.Connector.Authentication.IServiceClientCredentialProvider">
            <summary>
            ServiceClientCredentialProvider interface. This interface allows Bots to provide their own
            proof of service identity for the purpose of making service calls from the bot to 
            channels. The implementor should return ServiceClientCredentails from GetCredentials 
            method.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.IServiceClientCredentialProvider.GetCredentials">
            <summary>
            Get the credential necessary to provide identity/authorization to use.
            </summary>
            <returns>ServiceClientCedentials.</returns>
        </member>
        <member name="T:Microsoft.Bot.Connector.Authentication.JwtTokenExtractor">
            <summary>
            A JWT token processing class that gets identity information and performs security token validation.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.JwtTokenExtractor._openIdMetadataCache">
            <summary>
            Cache for OpenIdConnect configuration managers (one per metadata URL).
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.JwtTokenExtractor._endorsementsCache">
            <summary>
            Cache for Endorsement configuration managers (one per metadata URL).
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.JwtTokenExtractor._tokenValidationParameters">
            <summary>
            Token validation parameters for this instance.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.JwtTokenExtractor._openIdMetadata">
            <summary>
            OpenIdConnect configuration manager for this instance.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.JwtTokenExtractor._endorsementsData">
            <summary>
            Endorsements configuration manager for this instance.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.JwtTokenExtractor._allowedSigningAlgorithms">
            <summary>
            Allowed signing algorithms.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.JwtTokenExtractor.#ctor(System.Net.Http.HttpClient,Microsoft.IdentityModel.Tokens.TokenValidationParameters,System.String,System.Collections.Generic.HashSet{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.Authentication.JwtTokenExtractor"/> class.
            Extracts relevant data from JWT Tokens.
            </summary>
            <param name="httpClient">As part of validating JWT Tokens, endorsements need to be fetched from
            sources specified by the relevant security URLs. This HttpClient is used to allow for resource
            pooling around those retrievals. As those resources require TLS sharing the HttpClient is
            important to overall performance.</param>
            <param name="tokenValidationParameters">tokenValidationParameters.</param>
            <param name="metadataUrl">metadataUrl.</param>
            <param name="allowedSigningAlgorithms">allowedSigningAlgorithms.</param>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.JwtTokenExtractor.#ctor(System.Net.Http.HttpClient,Microsoft.IdentityModel.Tokens.TokenValidationParameters,System.String,System.Collections.Generic.HashSet{System.String},Microsoft.IdentityModel.Protocols.ConfigurationManager{System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.HashSet{System.String}}})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.Authentication.JwtTokenExtractor"/> class.
            Extracts relevant data from JWT Tokens.
            </summary>
            <param name="httpClient">As part of validating JWT Tokens, endorsements need to be fetched from
            sources specified by the relevant security URLs. This HttpClient is used to allow for resource
            pooling around those retrievals. As those resources require TLS sharing the HttpClient is
            important to overall performance.</param>
            <param name="tokenValidationParameters">tokenValidationParameters.</param>
            <param name="metadataUrl">metadataUrl.</param>
            <param name="allowedSigningAlgorithms">allowedSigningAlgorithms.</param>
            <param name="customEndorsementsConfig">Custom endorsement configuration to be used by the JwtTokenExtractor.</param>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.JwtTokenExtractor.GetIdentityAsync(System.String,System.String)">
            <summary>
            Gets the claims identity associated with a request.
            </summary>
            <param name="authorizationHeader">The raw HTTP header in the format: "Bearer [longString]".</param>
            <param name="channelId">The Id of the channel being validated in the original request.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> object.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.JwtTokenExtractor.GetIdentityAsync(System.String,System.String,System.String[])">
            <summary>
            Gets the claims identity associated with a request.
            </summary>
            <param name="authorizationHeader">The raw HTTP header in the format: "Bearer [longString]".</param>
            <param name="channelId">The Id of the channel being validated in the original request.</param>
            <param name="requiredEndorsements">The required JWT endorsements.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> object.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.JwtTokenExtractor.GetIdentityAsync(System.String,System.String,System.String)">
            <summary>
            Gets the claims identity associated with a request.
            </summary>
            <param name="scheme">The associated scheme.</param>
            <param name="parameter">The token.</param>
            <param name="channelId">The Id of the channel being validated in the original request.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> object.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.JwtTokenExtractor.GetIdentityAsync(System.String,System.String,System.String,System.String[])">
            <summary>
            Gets the claims identity associated with a request.
            </summary>
            <param name="scheme">The associated scheme.</param>
            <param name="parameter">The token.</param>
            <param name="channelId">The Id of the channel being validated in the original request.</param>
            <param name="requiredEndorsements">The required JWT endorsements.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> object.</returns>
        </member>
        <member name="T:Microsoft.Bot.Connector.Authentication.JwtTokenProviderFactory">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.JwtTokenProviderFactory.CreateAzureServiceTokenProvider(System.String,System.Net.Http.HttpClient)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.Bot.Connector.Authentication.JwtTokenValidation">
            <summary>
            Contains helper methods for authenticating incoming HTTP requests.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.JwtTokenValidation.AuthenticateRequest(Microsoft.Bot.Schema.IActivity,System.String,Microsoft.Bot.Connector.Authentication.ICredentialProvider,Microsoft.Bot.Connector.Authentication.IChannelProvider,System.Net.Http.HttpClient)">
            <summary>
            Authenticates the request and adds the activity's <see cref="P:Microsoft.Bot.Schema.Activity.ServiceUrl"/>
            to the set of trusted URLs.
            </summary>
            <param name="activity">The activity.</param>
            <param name="authHeader">The authentication header.</param>
            <param name="credentials">The bot's credential provider.</param>
            <param name="provider">The bot's channel service provider.</param>
            <param name="httpClient">The HTTP client.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the task completes successfully, the result contains the claims-based
            identity for the request.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.JwtTokenValidation.AuthenticateRequest(Microsoft.Bot.Schema.IActivity,System.String,Microsoft.Bot.Connector.Authentication.ICredentialProvider,Microsoft.Bot.Connector.Authentication.IChannelProvider,Microsoft.Bot.Connector.Authentication.AuthenticationConfiguration,System.Net.Http.HttpClient)">
            <summary>
            Authenticates the request and adds the activity's <see cref="P:Microsoft.Bot.Schema.Activity.ServiceUrl"/>
            to the set of trusted URLs.
            </summary>
            <param name="activity">The activity.</param>
            <param name="authHeader">The authentication header.</param>
            <param name="credentials">The bot's credential provider.</param>
            <param name="provider">The bot's channel service provider.</param>
            <param name="authConfig">The optional authentication configuration.</param>
            <param name="httpClient">The HTTP client.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the task completes successfully, the result contains the claims-based
            identity for the request.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.JwtTokenValidation.ValidateAuthHeader(System.String,Microsoft.Bot.Connector.Authentication.ICredentialProvider,Microsoft.Bot.Connector.Authentication.IChannelProvider,System.String,System.String,System.Net.Http.HttpClient)">
            <summary>
            Validates the authentication header of an incoming request.
            </summary>
            <param name="authHeader">The authentication header to validate.</param>
            <param name="credentials">The bot's credential provider.</param>
            <param name="channelProvider">The bot's channel service provider.</param>
            <param name="channelId">The ID of the channel that sent the request.</param>
            <param name="serviceUrl">The service URL for the activity.</param>
            <param name="httpClient">The HTTP client.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the task completes successfully, the result contains the claims-based
            identity for the request.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.JwtTokenValidation.ValidateAuthHeader(System.String,Microsoft.Bot.Connector.Authentication.ICredentialProvider,Microsoft.Bot.Connector.Authentication.IChannelProvider,System.String,Microsoft.Bot.Connector.Authentication.AuthenticationConfiguration,System.String,System.Net.Http.HttpClient)">
            <summary>
            Validates the authentication header of an incoming request.
            </summary>
            <param name="authHeader">The authentication header to validate.</param>
            <param name="credentials">The bot's credential provider.</param>
            <param name="channelProvider">The bot's channel service provider.</param>
            <param name="channelId">The ID of the channel that sent the request.</param>
            <param name="authConfig">The authentication configuration.</param>
            <param name="serviceUrl">The service URL for the activity.</param>
            <param name="httpClient">The HTTP client.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the task completes successfully, the result contains the claims-based
            identity for the request.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.JwtTokenValidation.GetAppIdFromClaims(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})">
            <summary>
            Gets the AppId from a claims list.
            </summary>
            <remarks>
            In v1 tokens the AppId is in the the <see cref="F:Microsoft.Bot.Connector.Authentication.AuthenticationConstants.AppIdClaim"/> claim.
            In v2 tokens the AppId is in the azp <see cref="F:Microsoft.Bot.Connector.Authentication.AuthenticationConstants.AuthorizedParty"/> claim.
            If the <see cref="F:Microsoft.Bot.Connector.Authentication.AuthenticationConstants.VersionClaim"/> is not present, this method will attempt to
            obtain the attribute from the <see cref="F:Microsoft.Bot.Connector.Authentication.AuthenticationConstants.AppIdClaim"/> or if present.
            </remarks>
            <param name="claims">A list of <see cref="T:System.Security.Claims.Claim"/> instances.</param>
            <returns>The value of the appId claim if found (null if it can't find a suitable claim).</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.JwtTokenValidation.ValidateClaimsAsync(Microsoft.Bot.Connector.Authentication.AuthenticationConfiguration,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})">
            <summary>
            Validates the identity claims against the <see cref="T:Microsoft.Bot.Connector.Authentication.ClaimsValidator"/> in <see cref="T:Microsoft.Bot.Connector.Authentication.AuthenticationConfiguration"/> if present. 
            </summary>
            <param name="authConfig">An <see cref="T:Microsoft.Bot.Connector.Authentication.AuthenticationConfiguration"/> instance.</param>
            <param name="claims">The list of claims to validate.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <exception cref="T:System.UnauthorizedAccessException">If the validation returns false, or ClaimsValidator is null and this is a skill claim.</exception>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.JwtTokenValidation.IsValidTokenFormat(System.String)">
            <summary>
            Internal helper to check if the token has the shape we expect "Bearer [big long string]".
            </summary>
            <param name="authHeader">A string containing the token header.</param>
            <returns>True if the token is valid, false if not.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.JwtTokenValidation.AuthenticateTokenAsync(System.String,Microsoft.Bot.Connector.Authentication.ICredentialProvider,Microsoft.Bot.Connector.Authentication.IChannelProvider,System.String,Microsoft.Bot.Connector.Authentication.AuthenticationConfiguration,System.String,System.Net.Http.HttpClient)">
            <summary>
            Authenticates the auth header token from the request.
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.Authentication.ManagedIdentityAppCredentials">
            <summary>
            Managed Service Identity auth implementation.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.ManagedIdentityAppCredentials.#ctor(System.String,System.String,Microsoft.Bot.Connector.Authentication.IJwtTokenProviderFactory,System.Net.Http.HttpClient,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.Authentication.ManagedIdentityAppCredentials"/> class.
            Managed Identity for AAD credentials auth and caching.
            </summary>
            <param name="appId">Client ID for the managed identity assigned to the bot.</param>
            <param name="oAuthScope">The scope for the token.</param>
            <param name="tokenProviderFactory">The JWT token provider factory to use.</param>
            <param name="customHttpClient">Optional <see cref="T:System.Net.Http.HttpClient"/> to be used when acquiring tokens.</param>
            <param name="logger">Optional <see cref="T:Microsoft.Extensions.Logging.ILogger"/> to gather telemetry data while acquiring and managing credentials.</param>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.ManagedIdentityAppCredentials.BuildAuthenticator">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.ManagedIdentityAppCredentials.BuildIAuthenticator">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Bot.Connector.Authentication.ManagedIdentityAuthenticator">
            <summary>
            Abstraction to acquire tokens from a Managed Service Identity.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.ManagedIdentityAuthenticator.#ctor(System.String,System.String,Microsoft.Bot.Connector.Authentication.IJwtTokenProviderFactory,System.Net.Http.HttpClient,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.Authentication.ManagedIdentityAuthenticator"/> class.
            </summary>
            <param name="appId">Client id for the managed identity to be used for acquiring tokens.</param>
            <param name="resource">Resource for which to acquire the token.</param>
            <param name="tokenProviderFactory">The JWT token provider factory to use.</param>
            <param name="customHttpClient">A customized instance of the HttpClient class.</param>
            <param name="logger">The type used to perform logging.</param>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.ManagedIdentityAuthenticator.GetTokenAsync(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Bot.Connector.Authentication.ManagedIdentityServiceClientCredentialsFactory">
            <summary>
            A Managed Identity implementation of the <see cref="T:Microsoft.Bot.Connector.Authentication.ServiceClientCredentialsFactory"/> interface.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.ManagedIdentityServiceClientCredentialsFactory.#ctor(System.String,Microsoft.Bot.Connector.Authentication.IJwtTokenProviderFactory,System.Net.Http.HttpClient,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.Authentication.ManagedIdentityServiceClientCredentialsFactory"/> class.
            </summary>
            <param name="appId">Client ID for the managed identity assigned to the bot.</param>
            <param name="tokenProviderFactory">The JWT token provider factory to use.</param>
            <param name="httpClient">A custom httpClient to use.</param>
            <param name="logger">A logger instance to use.</param>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.ManagedIdentityServiceClientCredentialsFactory.IsValidAppIdAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.ManagedIdentityServiceClientCredentialsFactory.IsAuthenticationDisabledAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.ManagedIdentityServiceClientCredentialsFactory.CreateCredentialsAsync(System.String,System.String,System.String,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.Bot.Connector.Authentication.MicrosoftAppCredentials">
            <summary>
            MicrosoftAppCredentials auth implementation and cache.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.MicrosoftAppCredentials.MicrosoftAppTypeKey">
            <summary>
            The configuration property for the App type of the bot -- MultiTenant, SingleTenant, or, MSI.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.MicrosoftAppCredentials.MicrosoftAppPasswordKey">
            <summary>
            The configuration property for the Microsoft app Password.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.MicrosoftAppCredentials.MicrosoftAppIdKey">
            <summary>
            The configuration property for the Microsoft app ID.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.MicrosoftAppCredentials.MicrosoftAppTenantIdKey">
            <summary>
            The configuration property for Tenant ID of the Azure AD tenant.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.MicrosoftAppCredentials.Empty">
            <summary>
            An empty set of credentials.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.MicrosoftAppCredentials.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.Authentication.MicrosoftAppCredentials"/> class.
            </summary>
            <param name="appId">The Microsoft app ID.</param>
            <param name="password">The Microsoft app password.</param>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.MicrosoftAppCredentials.#ctor(System.String,System.String,System.Net.Http.HttpClient)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.Authentication.MicrosoftAppCredentials"/> class.
            </summary>
            <param name="appId">The Microsoft app ID.</param>
            <param name="password">The Microsoft app password.</param>
            <param name="customHttpClient">Optional <see cref="T:System.Net.Http.HttpClient"/> to be used when acquiring tokens.</param>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.MicrosoftAppCredentials.#ctor(System.String,System.String,System.Net.Http.HttpClient,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.Authentication.MicrosoftAppCredentials"/> class.
            </summary>
            <param name="appId">The Microsoft app ID.</param>
            <param name="password">The Microsoft app password.</param>
            <param name="customHttpClient">Optional <see cref="T:System.Net.Http.HttpClient"/> to be used when acquiring tokens.</param>
            <param name="logger">Optional <see cref="T:Microsoft.Extensions.Logging.ILogger"/> to gather telemetry data while acquiring and managing credentials.</param>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.MicrosoftAppCredentials.#ctor(System.String,System.String,System.Net.Http.HttpClient,Microsoft.Extensions.Logging.ILogger,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.Authentication.MicrosoftAppCredentials"/> class.
            </summary>
            <param name="appId">The Microsoft app ID.</param>
            <param name="password">The Microsoft app password.</param>
            <param name="customHttpClient">Optional <see cref="T:System.Net.Http.HttpClient"/> to be used when acquiring tokens.</param>
            <param name="logger">Optional <see cref="T:Microsoft.Extensions.Logging.ILogger"/> to gather telemetry data while acquiring and managing credentials.</param>
            <param name="oAuthScope">The scope for the token.</param>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.MicrosoftAppCredentials.#ctor(System.String,System.String,System.String,System.Net.Http.HttpClient)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.Authentication.MicrosoftAppCredentials"/> class.
            </summary>
            <param name="appId">The Microsoft app ID.</param>
            <param name="password">The Microsoft app password.</param>
            <param name="channelAuthTenant">Optional. The oauth token tenant.</param>
            <param name="customHttpClient">Optional <see cref="T:System.Net.Http.HttpClient"/> to be used when acquiring tokens.</param>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.MicrosoftAppCredentials.#ctor(System.String,System.String,System.String,System.Net.Http.HttpClient,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.Authentication.MicrosoftAppCredentials"/> class.
            </summary>
            <param name="appId">The Microsoft app ID.</param>
            <param name="password">The Microsoft app password.</param>
            <param name="channelAuthTenant">Optional. The oauth token tenant.</param>
            <param name="customHttpClient">Optional <see cref="T:System.Net.Http.HttpClient"/> to be used when acquiring tokens.</param>
            <param name="logger">Optional <see cref="T:Microsoft.Extensions.Logging.ILogger"/> to gather telemetry data while acquiring and managing credentials.</param>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.MicrosoftAppCredentials.#ctor(System.String,System.String,System.String,System.Net.Http.HttpClient,Microsoft.Extensions.Logging.ILogger,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.Authentication.MicrosoftAppCredentials"/> class.
            </summary>
            <param name="appId">The Microsoft app ID.</param>
            <param name="password">The Microsoft app password.</param>
            <param name="channelAuthTenant">Optional. The oauth token tenant.</param>
            <param name="customHttpClient">Optional <see cref="T:System.Net.Http.HttpClient"/> to be used when acquiring tokens.</param>
            <param name="logger">Optional <see cref="T:Microsoft.Extensions.Logging.ILogger"/> to gather telemetry data while acquiring and managing credentials.</param>
            <param name="oAuthScope">The scope for the token.</param>
        </member>
        <member name="P:Microsoft.Bot.Connector.Authentication.MicrosoftAppCredentials.MicrosoftAppPassword">
            <summary>
            Gets or sets the Microsoft app password for this credential.
            </summary>
            <value>
            The Microsoft app password for this credential.
            </value>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.MicrosoftAppCredentials.BuildAuthenticator">
            <summary>
            Builds the lazy <see cref="T:Microsoft.Bot.Connector.Authentication.AdalAuthenticator" /> to be used for token acquisition.
            </summary>
            <returns>A lazy <see cref="T:Microsoft.Bot.Connector.Authentication.AdalAuthenticator"/>.</returns>
        </member>
        <member name="T:Microsoft.Bot.Connector.Authentication.MicrosoftGovernmentAppCredentials">
            <summary>
            MicrosoftGovernmentAppCredentials auth implementation.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.MicrosoftGovernmentAppCredentials.Empty">
            <summary>
            An empty set of credentials.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.MicrosoftGovernmentAppCredentials.#ctor(System.String,System.String,System.Net.Http.HttpClient)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.Authentication.MicrosoftGovernmentAppCredentials"/> class.
            </summary>
            <param name="appId">The Microsoft app ID.</param>
            <param name="password">The Microsoft app password.</param>
            <param name="customHttpClient">Optional <see cref="T:System.Net.Http.HttpClient"/> to be used when acquiring tokens.</param>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.MicrosoftGovernmentAppCredentials.#ctor(System.String,System.String,System.Net.Http.HttpClient,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.Authentication.MicrosoftGovernmentAppCredentials"/> class.
            </summary>
            <param name="appId">The Microsoft app ID.</param>
            <param name="password">The Microsoft app password.</param>
            <param name="customHttpClient">Optional <see cref="T:System.Net.Http.HttpClient"/> to be used when acquiring tokens.</param>
            <param name="logger">Optional <see cref="T:Microsoft.Extensions.Logging.ILogger"/> to gather telemetry data while acquiring and managing credentials.</param>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.MicrosoftGovernmentAppCredentials.#ctor(System.String,System.String,System.Net.Http.HttpClient,Microsoft.Extensions.Logging.ILogger,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.Authentication.MicrosoftGovernmentAppCredentials"/> class.
            </summary>
            <param name="appId">The Microsoft app ID.</param>
            <param name="password">The Microsoft app password.</param>
            <param name="customHttpClient">Optional <see cref="T:System.Net.Http.HttpClient"/> to be used when acquiring tokens.</param>
            <param name="logger">Optional <see cref="T:Microsoft.Extensions.Logging.ILogger"/> to gather telemetry data while acquiring and managing credentials.</param>
            <param name="oAuthScope">The scope for the token (defaults to <see cref="F:Microsoft.Bot.Connector.Authentication.GovernmentAuthenticationConstants.ToChannelFromBotOAuthScope"/> if null).</param>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.MicrosoftGovernmentAppCredentials.#ctor(System.String,System.String,System.String,System.Net.Http.HttpClient,Microsoft.Extensions.Logging.ILogger,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.Authentication.MicrosoftGovernmentAppCredentials"/> class.
            </summary>
            <param name="appId">The Microsoft app ID.</param>
            <param name="password">The Microsoft app password.</param>
            <param name="tenantId">Tenant ID of the Azure AD tenant where the bot is created.</param>
            <param name="customHttpClient">Optional <see cref="T:System.Net.Http.HttpClient"/> to be used when acquiring tokens.</param>
            <param name="logger">Optional <see cref="T:Microsoft.Extensions.Logging.ILogger"/> to gather telemetry data while acquiring and managing credentials.</param>
            <param name="oAuthScope">The scope for the token (defaults to <see cref="F:Microsoft.Bot.Connector.Authentication.GovernmentAuthenticationConstants.ToChannelFromBotOAuthScope"/> if null).</param>
        </member>
        <member name="P:Microsoft.Bot.Connector.Authentication.MicrosoftGovernmentAppCredentials.OAuthEndpoint">
            <summary>
            Gets the OAuth endpoint to use.
            </summary>
            <value>
            The OAuth endpoint to use.
            </value>
        </member>
        <member name="T:Microsoft.Bot.Connector.Authentication.MsalAppCredentials">
            <summary>
            An authentication class that implements <see cref="T:Microsoft.Bot.Connector.Authentication.IAuthenticator"/>, used to acquire tokens for outgoing messages to the channels.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Authentication.MsalAppCredentials.Empty">
            <summary>
            An empty set of credentials.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.MsalAppCredentials.#ctor(Microsoft.Identity.Client.IConfidentialClientApplication,System.String,System.String,System.String,System.Boolean,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.Authentication.MsalAppCredentials"/> class.
            </summary>
            <param name="clientApplication">The client application to use to acquire tokens.</param>
            <param name="appId">The Microsoft application Id.</param>
            <param name="logger">Optional <see cref="T:Microsoft.Extensions.Logging.ILogger"/>.</param>
            <param name="authority">Optional authority.</param>
            <param name="validateAuthority">Whether to validate the authority.</param>
            <param name="scope">Optional custom scope.</param>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.MsalAppCredentials.#ctor(System.String,System.String,System.String,System.String,System.Boolean,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.Authentication.MsalAppCredentials"/> class.
            </summary>
            <param name="appId">The Microsoft application id.</param>
            <param name="appPassword">The Microsoft application password.</param>
            <param name="authority">Optional authority.</param>
            <param name="validateAuthority">Whether to validate the authority.</param>
            <param name="scope">Optional custom scope.</param>
            <param name="logger">Optional <see cref="T:Microsoft.Extensions.Logging.ILogger"/>.</param>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.MsalAppCredentials.#ctor(System.String,System.Security.Cryptography.X509Certificates.X509Certificate2,System.String,System.String,System.Boolean,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.Authentication.MsalAppCredentials"/> class.
            </summary>
            <param name="appId">The Microsoft application id.</param>
            <param name="certificate">The certificate to use for authentication.</param>
            <param name="validateAuthority">Optional switch for whether to validate the authority.</param>
            <param name="authority">Optional authority.</param>
            <param name="scope">Optional custom scope.</param>
            <param name="logger">Optional <see cref="T:Microsoft.Extensions.Logging.ILogger"/>.</param>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.MsalAppCredentials.BuildAuthenticator">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.MsalAppCredentials.BuildIAuthenticator">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Bot.Connector.Authentication.MsalServiceClientCredentialsFactory">
            <summary>
            Credential factory that uses MSAL to acquire tokens.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.MsalServiceClientCredentialsFactory.#ctor(Microsoft.Extensions.Configuration.IConfiguration,Microsoft.Identity.Client.IConfidentialClientApplication,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.Authentication.MsalServiceClientCredentialsFactory"/> class.
            </summary>
            <param name="configuration"><see cref="T:Microsoft.Extensions.Configuration.IConfiguration"/> where to get the AppId from.</param>
            <param name="clientApplication"><see cref="T:Microsoft.Identity.Client.IConfidentialClientApplication"/> used to acquire tokens.</param>
            <param name="logger">Optional <see cref="T:Microsoft.Extensions.Logging.ILogger"/> for credential acquisition telemetry.</param>
        </member>
        <member name="P:Microsoft.Bot.Connector.Authentication.MsalServiceClientCredentialsFactory.AppId">
            <summary>
            Gets the Microsoft App id.
            </summary>
            <value>
            The Microsoft App id.
            </value>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.MsalServiceClientCredentialsFactory.CreateCredentialsAsync(System.String,System.String,System.String,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.MsalServiceClientCredentialsFactory.IsAuthenticationDisabledAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.MsalServiceClientCredentialsFactory.IsValidAppIdAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Bot.Connector.Authentication.OAuthConfiguration">
            <summary>
            Configuration for OAuth client credential authentication.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Authentication.OAuthConfiguration.Authority">
            <summary>
            Gets or sets oAuth Authority for authentication.
            </summary>
            <value>
            OAuth Authority for authentication.
            </value>
        </member>
        <member name="P:Microsoft.Bot.Connector.Authentication.OAuthConfiguration.ValidateAuthority">
            <summary>
            Gets or sets a value indicating whether the Authority should be validated.
            </summary>
            <value>
            Boolean value indicating whether the Authority should be validated.
            </value>
        </member>
        <member name="P:Microsoft.Bot.Connector.Authentication.OAuthConfiguration.Scope">
            <summary>
            Gets or sets oAuth scope for authentication.
            </summary>
            <value>
            OAuth scope for authentication.
            </value>
        </member>
        <member name="T:Microsoft.Bot.Connector.Authentication.PasswordServiceClientCredentialFactory">
            <summary>
            A simple implementation of the <see cref="T:Microsoft.Bot.Connector.Authentication.ServiceClientCredentialsFactory"/> interface.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.PasswordServiceClientCredentialFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.Authentication.PasswordServiceClientCredentialFactory"/> class.
            with empty credentials.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.PasswordServiceClientCredentialFactory.#ctor(System.String,System.String,System.String,System.Net.Http.HttpClient,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.Authentication.PasswordServiceClientCredentialFactory"/> class.
            with the provided credentials.
            </summary>
            <param name="appId">The app ID.</param>
            <param name="password">The app password.</param>
            <param name="tenantId">Tenant ID of the Azure AD tenant where the bot is created.</param>
            <param name="httpClient">A custom httpClient to use.</param>
            <param name="logger">A logger instance to use.</param>
        </member>
        <member name="P:Microsoft.Bot.Connector.Authentication.PasswordServiceClientCredentialFactory.AppId">
            <summary>
            Gets or sets the app ID for this credential.
            </summary>
            <value>
            The app ID for this credential.
            </value>
        </member>
        <member name="P:Microsoft.Bot.Connector.Authentication.PasswordServiceClientCredentialFactory.Password">
            <summary>
            Gets or sets the app password for this credential.
            </summary>
            <value>
            The app password for this credential.
            </value>
        </member>
        <member name="P:Microsoft.Bot.Connector.Authentication.PasswordServiceClientCredentialFactory.TenantId">
            <summary>
            Gets the Tenant ID of the Azure AD tenant where the bot is created.
            </summary>
            <value>
            The Tenant ID of the Azure AD tenant where the bot is created.
            </value>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.PasswordServiceClientCredentialFactory.IsValidAppIdAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.PasswordServiceClientCredentialFactory.IsAuthenticationDisabledAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.PasswordServiceClientCredentialFactory.CreateCredentialsAsync(System.String,System.String,System.String,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Bot.Connector.Authentication.Retry">
            <summary>
            Retries asynchronous operations. In case of errors, it collects and returns exceptions in an AggregateException object.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.Retry.Run``1(System.Func{System.Threading.Tasks.Task{``0}},System.Func{System.Exception,System.Int32,Microsoft.Bot.Connector.Authentication.RetryParams})">
            <summary>
            Starts the retry of the action requested.
            </summary>
            <typeparam name="TResult">The result expected from the action performed.</typeparam>
            <param name="task">A reference to the action to retry.</param>
            <param name="retryExceptionHandler">A reference to the method that handles exceptions.</param>
            <returns>A result object.</returns>
        </member>
        <member name="T:Microsoft.Bot.Connector.Authentication.RetryParams">
            <summary>
            Wrapper class that defines a retrying behavior.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.RetryParams.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.Authentication.RetryParams"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.RetryParams.#ctor(System.TimeSpan,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.Authentication.RetryParams"/> class.
            </summary>
            <param name="retryAfter">Timespan to wait between retries.</param>
            <param name="shouldRetry">Bool that indicates if a retry is required. The default is true.</param>
        </member>
        <member name="P:Microsoft.Bot.Connector.Authentication.RetryParams.StopRetrying">
            <summary>
            Gets the property that stops retrying.
            </summary>
            <value>
            The property that stops retrying.
            </value>
        </member>
        <member name="P:Microsoft.Bot.Connector.Authentication.RetryParams.ShouldRetry">
            <summary>
            Gets or sets a value indicating whether the retry action should be performed.
            </summary>
            <value>
            A value indicating whether the retry action should be performed.
            </value>
        </member>
        <member name="P:Microsoft.Bot.Connector.Authentication.RetryParams.RetryAfter">
            <summary>
            Gets or sets a value indicating the time interval to wait between retry attempts.
            </summary>
            <value>
            A value indicating the time interval to wait between retry attempts.
            </value>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.RetryParams.DefaultBackOff(System.Int32)">
            <summary>
            Evaluates if the current retry count is less than the maximum number of retries allowed, and returns a new
            <see cref="T:Microsoft.Bot.Connector.Authentication.RetryParams" /> object if true, or sets the <see cref="P:Microsoft.Bot.Connector.Authentication.RetryParams.StopRetrying"/> property to false if false.
            </summary>
            <param name="retryCount">The number of times to perform a retry.</param>
            <returns>A <see cref="T:Microsoft.Bot.Connector.Authentication.RetryParams"/> object.</returns>
        </member>
        <member name="T:Microsoft.Bot.Connector.Authentication.ServiceClientCredentialsFactory">
            <summary>
            The <see cref="T:Microsoft.Bot.Connector.Authentication.ServiceClientCredentialsFactory"/> abstract class to allows Bots to provide their own
            <see cref="T:Microsoft.Rest.ServiceClientCredentials"/> for bot to channel or skill bot to parent bot calls.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.ServiceClientCredentialsFactory.IsValidAppIdAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Validates an app ID.
            </summary>
            <param name="appId">The app ID to validate.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the task is successful, the result is true if <paramref name="appId"/>
            is valid for the controller; otherwise, false.
            <para>
            This method is async to enable custom implementations
            that may need to call out to serviced to validate the appId / password pair.
            </para></remarks>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.ServiceClientCredentialsFactory.IsAuthenticationDisabledAsync(System.Threading.CancellationToken)">
            <summary>
            Checks whether bot authentication is disabled.
            </summary>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the task is successful and bot authentication is disabled, the result
            is true; otherwise, false.
            <para>
            This method is async to enable custom implementations
            that may need to call out to serviced to validate the appId / password pair.
            </para></remarks>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.ServiceClientCredentialsFactory.CreateCredentialsAsync(System.String,System.String,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            A factory method for creating ServiceClientCredentials.
            </summary>
            <param name="appId">The appId.</param>
            <param name="audience">The audience.</param>
            <param name="loginEndpoint">The login url.</param>
            <param name="validateAuthority">The validate authority vale to use.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> representing the result of the asynchronous operation.</returns>
        </member>
        <member name="T:Microsoft.Bot.Connector.Authentication.SimpleChannelProvider">
            <summary>
            A simple channel provider with basic configuration parameters to connect to a Bot Framework channel service.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.SimpleChannelProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.Authentication.SimpleChannelProvider"/> class.
            Creates a SimpleChannelProvider with no ChannelService which will use Public Azure.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.SimpleChannelProvider.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.Authentication.SimpleChannelProvider"/> class.
            </summary>
            <param name="channelService">The ChannelService to use. Null or empty strings represent Public Azure, the string 'https://botframework.us' represents US Government Azure, and other values are for private channels.</param>
        </member>
        <member name="P:Microsoft.Bot.Connector.Authentication.SimpleChannelProvider.ChannelService">
            <summary>
            Gets or sets the channel service.
            </summary>
            <value>
            The channel service.
            </value>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.SimpleChannelProvider.GetChannelServiceAsync">
            <summary>
            Gets the channel service property for this channel provider.
            </summary>
            <returns>The channel service property for the channel provider.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.SimpleChannelProvider.IsGovernment">
            <summary>
            Gets a value of whether this provider represents a channel on US Government Azure.
            </summary>
            <returns>True if this channel provider represents a channel on US Government Azure.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.SimpleChannelProvider.IsPublicAzure">
            <summary>
            Gets a value of whether this provider represents a channel on Public Azure.
            </summary>
            <returns>True if this channel provider represents a channel on Public Azure.</returns>
        </member>
        <member name="T:Microsoft.Bot.Connector.Authentication.SimpleCredentialProvider">
            <summary>
            A simple implementation of the <see cref="T:Microsoft.Bot.Connector.Authentication.ICredentialProvider"/> interface.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.SimpleCredentialProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.Authentication.SimpleCredentialProvider"/> class.
            with empty credentials.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.SimpleCredentialProvider.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.Authentication.SimpleCredentialProvider"/> class.
            with the provided credentials.
            </summary>
            <param name="appId">The app ID.</param>
            <param name="password">The app password.</param>
        </member>
        <member name="P:Microsoft.Bot.Connector.Authentication.SimpleCredentialProvider.AppId">
            <summary>
            Gets or sets the app ID for this credential.
            </summary>
            <value>
            The app ID for this credential.
            </value>
        </member>
        <member name="P:Microsoft.Bot.Connector.Authentication.SimpleCredentialProvider.Password">
            <summary>
            Gets or sets the app password for this credential.
            </summary>
            <value>
            The app password for this credential.
            </value>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.SimpleCredentialProvider.IsValidAppIdAsync(System.String)">
            <summary>
            Validates an app ID.
            </summary>
            <param name="appId">The app ID to validate.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the task is successful, the result is true if <paramref name="appId"/>
            is valid for the controller; otherwise, false.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.SimpleCredentialProvider.GetAppPasswordAsync(System.String)">
            <summary>
            Gets the app password for a given bot app ID.
            </summary>
            <param name="appId">The ID of the app to get the password for.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the task is successful and the app ID is valid, the result
            contains the password; otherwise, null.
            </remarks>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.SimpleCredentialProvider.IsAuthenticationDisabledAsync">
            <summary>
            Checks whether bot authentication is disabled.
            </summary>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the task is successful and bot authentication is disabled, the result
            is true; otherwise, false.
            </remarks>
        </member>
        <member name="T:Microsoft.Bot.Connector.Authentication.SkillValidation">
            <summary>
            Validates JWT tokens sent to and from a Skill.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.SkillValidation.IsSkillToken(System.String)">
            <summary>
            Determines if a given Auth header is from from a skill to bot or bot to skill request.
            </summary>
            <param name="authHeader">Bearer Token, in the "Bearer [Long String]" Format.</param>
            <returns>True, if the token was issued for a skill to bot communication. Otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.SkillValidation.IsSkillClaim(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})">
            <summary>
            Checks if the given list of claims represents a skill.
            </summary>
            <remarks>
            A skill claim should contain:
                An <see cref="F:Microsoft.Bot.Connector.Authentication.AuthenticationConstants.VersionClaim"/> claim.
                An <see cref="F:Microsoft.Bot.Connector.Authentication.AuthenticationConstants.AudienceClaim"/> claim.
                An <see cref="F:Microsoft.Bot.Connector.Authentication.AuthenticationConstants.AppIdClaim"/> claim (v1) or an a <see cref="F:Microsoft.Bot.Connector.Authentication.AuthenticationConstants.AuthorizedParty"/> claim (v2).
            And the appId claim should be different than the audience claim.
            When a channel (webchat, teams, etc.) invokes a bot, the <see cref="F:Microsoft.Bot.Connector.Authentication.AuthenticationConstants.AudienceClaim"/>
            is set to <see cref="F:Microsoft.Bot.Connector.Authentication.AuthenticationConstants.ToBotFromChannelTokenIssuer"/> but when a bot calls another bot,
            the audience claim is set to the appId of the bot being invoked.
            The protocol supports v1 and v2 tokens:
            For v1 tokens, the  <see cref="F:Microsoft.Bot.Connector.Authentication.AuthenticationConstants.AppIdClaim"/> is present and set to the app Id of the calling bot.
            For v2 tokens, the  <see cref="F:Microsoft.Bot.Connector.Authentication.AuthenticationConstants.AuthorizedParty"/> is present and set to the app Id of the calling bot.
            </remarks>
            <param name="claims">A list of claims.</param>
            <returns>True if the list of claims is a skill claim, false if is not.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.SkillValidation.AuthenticateChannelToken(System.String,Microsoft.Bot.Connector.Authentication.ICredentialProvider,Microsoft.Bot.Connector.Authentication.IChannelProvider,System.Net.Http.HttpClient,System.String,Microsoft.Bot.Connector.Authentication.AuthenticationConfiguration)">
            <summary>
            Validates that the incoming Auth Header is a token sent from a bot to a skill or from a skill to a bot.
            </summary>
            <param name="authHeader">The raw HTTP header in the format: "Bearer [longString]".</param>
            <param name="credentials">The user defined set of valid credentials, such as the AppId.</param>
            <param name="channelProvider">The channelService value that distinguishes public Azure from US Government Azure.</param>
            <param name="httpClient">
            Authentication of tokens requires calling out to validate Endorsements and related documents. The
            HttpClient is used for making those calls. Those calls generally require TLS connections, which are expensive to
            setup and teardown, so a shared HttpClient is recommended.
            </param>
            <param name="channelId">The ID of the channel to validate.</param>
            <param name="authConfig">The authentication configuration.</param>
            <returns>A <see cref="T:System.Security.Claims.ClaimsIdentity"/> instance if the validation is successful.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.SkillValidation.CreateAnonymousSkillClaim">
            <summary>
            Creates a <see cref="T:System.Security.Claims.ClaimsIdentity"/> for an anonymous (unauthenticated) skill. 
            </summary>
            <returns>A <see cref="T:System.Security.Claims.ClaimsIdentity"/> instance with authentication type set to <see cref="F:Microsoft.Bot.Connector.Authentication.AuthenticationConstants.AnonymousAuthType"/> and a reserved <see cref="F:Microsoft.Bot.Connector.Authentication.AuthenticationConstants.AnonymousSkillAppId"/> claim.</returns>
        </member>
        <member name="T:Microsoft.Bot.Connector.Authentication.ThrottleException">
            <summary>
            Custom throttling exception.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.ThrottleException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.Authentication.ThrottleException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.ThrottleException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.Authentication.ThrottleException"/> class with an exception message.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.ThrottleException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.Authentication.ThrottleException"/> class with an exception message and inner exception.
            </summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="P:Microsoft.Bot.Connector.Authentication.ThrottleException.RetryParams">
            <summary>
            Gets or sets the property that defines the retrying behavior.
            </summary>
            <value>
            The property that defines the retrying behavior.
            </value>
        </member>
        <member name="T:Microsoft.Bot.Connector.Authentication.TimeSpanExtensions">
            <summary>
            Extention methods for the <see cref="T:System.TimeSpan"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.TimeSpanExtensions.WithJitter(System.TimeSpan,System.Double)">
            <summary>
            Generates a uniform distribution between zero and ten percent of the proposed delay and adds it
            to the delay as random noise to distribute requests across time.
            </summary>
            <param name="delay">The requested delay.</param>
            <param name="multiplier">A multiplier.</param>
            <returns>A uniformly distributed time span.</returns>
        </member>
        <member name="T:Microsoft.Bot.Connector.Authentication.UserTokenClient">
            <summary>
            Client for access user token service.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.UserTokenClient.GetUserTokenAsync(System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Attempts to retrieve the token for a user that's in a login flow.
            </summary>
            <param name="userId">The user id that will be associated with the token.</param>
            <param name="connectionName">Name of the auth connection to use.</param>
            <param name="channelId">The channel Id that will be associated with the token.</param>
            <param name="magicCode">(Optional) Optional user entered code to validate.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Token Response.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.UserTokenClient.GetSignInResourceAsync(System.String,Microsoft.Bot.Schema.Activity,System.String,System.Threading.CancellationToken)">
            <summary>
            Get the raw signin link to be sent to the user for signin for a connection name.
            </summary>
            <param name="connectionName">Name of the auth connection to use.</param>
            <param name="activity">The <see cref="T:Microsoft.Bot.Schema.Activity"/> from which to derive the token exchange state.</param>
            <param name="finalRedirect">The final URL that the OAuth flow will redirect to.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> representing the result of the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.UserTokenClient.SignOutUserAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Signs the user out with the token server.
            </summary>
            <param name="userId">The user id that will be associated with the token.</param>
            <param name="connectionName">Name of the auth connection to use.</param>
            <param name="channelId">The channel Id that will be associated with the token.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the result of the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.UserTokenClient.GetTokenStatusAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves the token status for each configured connection for the given user.
            </summary>
            <param name="userId">The user id that will be associated with the token.</param>
            <param name="channelId">The channel Id that will be associated with the token.</param>
            <param name="includeFilter">The includeFilter.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>A Task of Array of TokenStatus.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.UserTokenClient.GetAadTokensAsync(System.String,System.String,System.String[],System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves Azure Active Directory tokens for particular resources on a configured connection.
            </summary>
            <param name="userId">The user id that will be associated with the token.</param>
            <param name="connectionName">Name of the auth connection to use.</param>
            <param name="resourceUrls">The list of resource URLs to retrieve tokens for.</param>
            <param name="channelId">The channel Id that will be associated with the token.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>A Task of Dictionary of resourceUrl to the corresponding TokenResponse.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.UserTokenClient.ExchangeTokenAsync(System.String,System.String,System.String,Microsoft.Bot.Schema.TokenExchangeRequest,System.Threading.CancellationToken)">
            <summary>
            Performs a token exchange operation such as for single sign-on.
            </summary>
            <param name="userId">The user id that will be associated with the token.</param>
            <param name="connectionName">Name of the auth connection to use.</param>
            <param name="channelId">The channel Id that will be associated with the token.</param>
            <param name="exchangeRequest">The exchange request details, either a token to exchange or a uri to exchange.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the result of the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.UserTokenClient.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.UserTokenClient.CreateTokenExchangeState(System.String,System.String,Microsoft.Bot.Schema.Activity)">
            <summary>
            Helper function to create the base64 encoded token exchange state used in GetSignInResourceAsync calls.
            </summary>
            <param name="appId">The appId to include in the token exchange state.</param>
            <param name="connectionName">The connectionName to include in the token exchange state.</param>
            <param name="activity">The <see cref="T:Microsoft.Bot.Schema.Activity"/> from which to derive the token exchange state.</param>
            <returns>base64 encoded token exchange state.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Authentication.UserTokenClient.Dispose(System.Boolean)">
            <summary>
            Protected implementation of dispose pattern.
            </summary>
            <param name="disposing">Indicates where this method is called from.</param>
        </member>
        <member name="T:Microsoft.Bot.Connector.BotSignIn">
            <summary>
            BotSignIn operations.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.BotSignIn.#ctor(Microsoft.Bot.Connector.OAuthClient)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.BotSignIn"/> class.
            </summary>
            <param name='client'>
            Reference to the service client.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null.
            </exception>
        </member>
        <member name="P:Microsoft.Bot.Connector.BotSignIn.Client">
            <summary>
            Gets a reference to the OAuthClient.
            </summary>
            <value>The OAuthClient.</value>
        </member>
        <member name="M:Microsoft.Bot.Connector.BotSignIn.GetSignInUrlWithHttpMessagesAsync(System.String,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>Gets sign-in URL with HTTP message. </summary>
            <param name='state'>State.</param>
            <param name='codeChallenge'>Code challenge.</param>
            <param name='emulatorUrl'>Emulator URL.</param>
            <param name='finalRedirect'>Final redirect.</param>
            <param name='customHeaders'>Headers that will be added to request.</param>
            <param name='cancellationToken'>The cancellation token.</param>
            <exception cref="T:Microsoft.Rest.HttpOperationException">Thrown when the operation returned an invalid status code.</exception>
            <exception cref="T:Microsoft.Rest.SerializationException">Thrown when unable to deserialize the response.</exception>
            <exception cref="T:Microsoft.Rest.ValidationException">Thrown when an input value does not match the expected data type, range or pattern of the data field.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when a required parameter is null.</exception>
            <returns>A response object containing the response body and response headers.</returns>
        </member>
        <member name="T:Microsoft.Bot.Connector.BotSignInExtensions">
            <summary>
            Extension methods for BotSignIn.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.BotSignInExtensions.GetSignInUrlAsync(Microsoft.Bot.Connector.IBotSignIn,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>Get sign-in URL.</summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='state'>State.</param>
            <param name='codeChallenge'>Code challenge.</param>
            <param name='emulatorUrl'>Emulator URL.</param>
            <param name='finalRedirect'>Final redirect.</param>
            <param name='cancellationToken'>The cancellation token.</param>
            <returns>The sign-in URL.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.BotSignInExtensions.GetSignInResourceAsync(Microsoft.Bot.Connector.OAuthClient,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>Get sign-in resource with HTTP message.</summary>
            <param name='operations'>The operations group for this extension method.</param>
            <param name='state'>State.</param>
            <param name='codeChallenge'>Code challenge.</param>
            <param name='emulatorUrl'>Emulator URL.</param>
            <param name='finalRedirect'>Final redirect.</param>
            <param name='cancellationToken'>The cancellation token.</param>
            <returns>The <see cref="T:Microsoft.Bot.Schema.SignInResource"/>.</returns>
        </member>
        <member name="T:Microsoft.Bot.Connector.Channels">
            <summary>
            Ids of channels supported by the Bot Builder.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Channels.Alexa">
            <summary>
            Alexa channel.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Channels.Console">
            <summary>
            Console channel.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Channels.Cortana">
            <summary>
            Cortana channel.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Channels.Directline">
            <summary>
            Direct Line channel.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Channels.DirectlineSpeech">
            <summary>
            Direct Line Speech channel.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Channels.Email">
            <summary>
            Email channel.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Channels.Emulator">
            <summary>
            Emulator channel.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Channels.Facebook">
            <summary>
            Facebook channel.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Channels.Groupme">
            <summary>
            Group Me channel.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Channels.Kik">
            <summary>
            Kik channel.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Channels.Line">
            <summary>
            Line channel.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Channels.Msteams">
            <summary>
            MS Teams channel.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Channels.Skype">
            <summary>
            Skype channel.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Channels.Skypeforbusiness">
            <summary>
            Skype for Business channel.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Channels.Slack">
            <summary>
            Slack channel.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Channels.Sms">
            <summary>
            SMS (Twilio) channel.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Channels.Telegram">
            <summary>
            Telegram channel.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Channels.Webchat">
            <summary>
            WebChat channel.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Channels.Test">
            <summary>
            Test channel.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Channels.Twilio">
            <summary>
            Twilio channel.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Channels.Telephony">
            <summary>
            Telephony channel.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.Channels.Omni">
            <summary>
            Omni channel.
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.ConnectorClient">
             <summary>
             The Bot Connector REST API allows your bot to send and receive messages
             to channels configured in the
             [Bot Framework Developer Portal](https://dev.botframework.com). The
             Connector service uses industry-standard REST
             and JSON over HTTPS.
            
             Client libraries for this REST API are available. See below for a list.
            
             Many bots will use both the Bot Connector REST API and the associated
             [Bot State REST API](/en-us/restapi/state). The
             Bot State REST API allows a bot to store and retrieve state associated
             with users and conversations.
            
             Authentication for both the Bot Connector and Bot State REST APIs is
             accomplished with JWT Bearer tokens, and is
             described in detail in the [Connector
             Authentication](/en-us/restapi/authentication) document.
            
             # Client Libraries for the Bot Connector REST API
            
             * [Bot Builder for C#](/en-us/csharp/builder/sdkreference/)
             * [Bot Builder for Node.js](/en-us/node/builder/overview/)
             * Generate your own from the [Connector API Swagger
             file](https://raw.githubusercontent.com/Microsoft/BotBuilder/master/CSharp/Library/Microsoft.Bot.Connector.Shared/Swagger/ConnectorAPI.json)
            
             © 2016 Microsoft.
             </summary>
            <summary>
            Implements a client for the Bot Connector service.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConnectorClient.#ctor(Microsoft.Rest.ServiceClientCredentials,System.Net.Http.DelegatingHandler[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.ConnectorClient"/> class.
            </summary>
            <param name='credentials'>
            Required. Subscription credentials which uniquely identify client subscription.
            </param>
            <param name='handlers'>
            Optional. The delegating handlers to add to the http client pipeline.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null.
            </exception>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConnectorClient.#ctor(Microsoft.Rest.ServiceClientCredentials,System.Net.Http.HttpClient,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.ConnectorClient"/> class.
            </summary>
            <param name='credentials'>
            Required. Subscription credentials which uniquely identify client subscription.
            </param>
            <param name='httpClient'>
            HttpClient to be used.
            </param>
            <param name='disposeHttpClient'>
            True: will dispose the provided httpClient on calling ConnectorClient.Dispose(). False: will not dispose provided httpClient.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null.
            </exception>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConnectorClient.#ctor(Microsoft.Rest.ServiceClientCredentials,System.Net.Http.HttpClientHandler,System.Net.Http.DelegatingHandler[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.ConnectorClient"/> class.
            </summary>
            <param name='credentials'>
            Required. Subscription credentials which uniquely identify client subscription.
            </param>
            <param name='rootHandler'>
            Optional. The http client handler used to handle http transport.
            </param>
            <param name='handlers'>
            Optional. The delegating handlers to add to the http client pipeline.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null.
            </exception>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConnectorClient.#ctor(System.Uri,Microsoft.Rest.ServiceClientCredentials,System.Net.Http.DelegatingHandler[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.ConnectorClient"/> class.
            </summary>
            <param name='baseUri'>
            Optional. The base URI of the service.
            </param>
            <param name='credentials'>
            Required. Subscription credentials which uniquely identify client subscription.
            </param>
            <param name='handlers'>
            Optional. The delegating handlers to add to the http client pipeline.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null.
            </exception>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConnectorClient.#ctor(System.Uri,Microsoft.Rest.ServiceClientCredentials,System.Net.Http.HttpClientHandler,System.Net.Http.DelegatingHandler[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.ConnectorClient"/> class.
            </summary>
            <param name='baseUri'>
            Optional. The base URI of the service.
            </param>
            <param name='credentials'>
            Required. Subscription credentials which uniquely identify client subscription.
            </param>
            <param name='rootHandler'>
            Optional. The http client handler used to handle http transport.
            </param>
            <param name='handlers'>
            Optional. The delegating handlers to add to the http client pipeline.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null.
            </exception>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConnectorClient.#ctor(System.Net.Http.HttpClient,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.ConnectorClient"/> class.
            </summary>
            <param name='httpClient'>HttpClient to be used.</param>
            <param name='disposeHttpClient'>
            True: will dispose the provided httpClient on calling ConnectorClient.Dispose(). False: will not dispose provided httpClient.</param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConnectorClient.#ctor(System.Net.Http.DelegatingHandler[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.ConnectorClient"/> class.
            </summary>
            <param name='handlers'>
            Optional. The delegating handlers to add to the http client pipeline.
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConnectorClient.#ctor(System.Net.Http.HttpClientHandler,System.Net.Http.DelegatingHandler[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.ConnectorClient"/> class.
            </summary>
            <param name='rootHandler'>
            Optional. The http client handler used to handle http transport.
            </param>
            <param name='handlers'>
            Optional. The delegating handlers to add to the http client pipeline.
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConnectorClient.#ctor(System.Uri,System.Net.Http.DelegatingHandler[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.ConnectorClient"/> class.
            </summary>
            <param name='baseUri'>
            Optional. The base URI of the service.
            </param>
            <param name='handlers'>
            Optional. The delegating handlers to add to the http client pipeline.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null.
            </exception>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConnectorClient.#ctor(System.Uri,System.Net.Http.HttpClientHandler,System.Net.Http.DelegatingHandler[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.ConnectorClient"/> class.
            </summary>
            <param name='baseUri'>
            Optional. The base URI of the service.
            </param>
            <param name='rootHandler'>
            Optional. The http client handler used to handle http transport.
            </param>
            <param name='handlers'>
            Optional. The delegating handlers to add to the http client pipeline.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null.
            </exception>
        </member>
        <member name="P:Microsoft.Bot.Connector.ConnectorClient.BaseUri">
            <summary>
            Gets or sets the base URI of the service.
            </summary>
            <value>The has URI of the service.</value>
        </member>
        <member name="P:Microsoft.Bot.Connector.ConnectorClient.SerializationSettings">
            <summary>
            Gets the JSON serialization settings.
            </summary>
            <value>The JSON serialization settings.</value>
        </member>
        <member name="P:Microsoft.Bot.Connector.ConnectorClient.DeserializationSettings">
            <summary>
            Gets the JSON deserialization settings.
            </summary>
            <value>The JSON deserialization settings.</value>
        </member>
        <member name="P:Microsoft.Bot.Connector.ConnectorClient.Credentials">
            <summary>
            Gets the subscription credentials which uniquely identify client subscription.
            </summary>
            <value>The subscription credentials.</value>
        </member>
        <member name="P:Microsoft.Bot.Connector.ConnectorClient.Attachments">
            <summary>
            Gets the IAttachments.
            </summary>
            <value>The IAttachments.</value>
        </member>
        <member name="P:Microsoft.Bot.Connector.ConnectorClient.Conversations">
            <summary>
            Gets the IConversations.
            </summary>
            <value>The IConversations.</value>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConnectorClient.Initialize">
            <summary>
            Initializes client properties.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConnectorClient.#ctor(System.Uri,System.String,System.String,System.Net.Http.DelegatingHandler[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.ConnectorClient"/> class.
            </summary>
            <param name="baseUri">Base URI for the Bot Connector service.</param>
            <param name="microsoftAppId">Optional, the Microsoft app ID for the bot resource.
            If null, this setting is read from the `MicrosoftAppId` setting for the bot's application resource.</param>
            <param name="microsoftAppPassword">Optional, the Microsoft app password for the bot.
            If null, this setting is read from the `MicrosoftAppPassword` setting for the bot's application resource.</param>
            <param name="handlers">Optional, an array of <see cref="T:System.Net.Http.DelegatingHandler"/> objects to
            add to the HTTP client pipeline.</param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConnectorClient.#ctor(System.Uri,Microsoft.Bot.Connector.Authentication.MicrosoftAppCredentials,System.Boolean,System.Net.Http.DelegatingHandler[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.ConnectorClient"/> class.
            </summary>
            <param name="baseUri">Base URI for the Bot Connector service.</param>
            <param name="credentials">Credentials for the Bot Connector service.</param>
            <param name="addJwtTokenRefresher">Deprecated, do not use.</param>
            <param name="handlers">Optional, an array of <see cref="T:System.Net.Http.DelegatingHandler"/> objects to
            add to the HTTP client pipeline.</param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConnectorClient.#ctor(System.Uri,Microsoft.Bot.Connector.Authentication.MicrosoftAppCredentials,System.Net.Http.HttpClient,System.Boolean,System.Net.Http.DelegatingHandler[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.ConnectorClient"/> class.
            </summary>
            <param name="baseUri">Base URI for the Bot Connector service.</param>
            <param name="credentials">Credentials for the Bot Connector service.</param>
            <param name="addJwtTokenRefresher">Deprecated, do not use.</param>
            <param name="customHttpClient">The HTTP client to use for this connector client.</param>
            <param name="handlers">Optional, an array of <see cref="T:System.Net.Http.DelegatingHandler"/> objects to
            add to the HTTP client pipeline.</param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConnectorClient.#ctor(System.Uri,Microsoft.Rest.ServiceClientCredentials,System.Net.Http.HttpClient,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.ConnectorClient"/> class.
            </summary>
            <param name="baseUri">Base URI for the Bot Connector service.</param>
            <param name="credentials">Credentials for the Bot Connector service.</param>
            <param name="customHttpClient">The HTTP client to use for this connector client.</param>
            <param name="disposeHttpClient">Whether to dispose the <see cref="T:System.Net.Http.HttpClient"/>.</param>
            <remarks>Constructor specifically designed to be the one that allows control of the disposing of the custom <see cref="T:System.Net.Http.HttpClient"/>.
            <see cref="T:Microsoft.Rest.ServiceClient`1"/> only has one constructor that accepts control of the disposing of the <see cref="T:System.Net.Http.HttpClient"/>, so we call that overload here.
            All other overloads of <see cref="T:Microsoft.Bot.Connector.ConnectorClient"/> will not control this parameter and it will default to true, resulting on disposal of the provided <see cref="T:System.Net.Http.HttpClient"/> when the <see cref="T:Microsoft.Bot.Connector.ConnectorClient"/> is disposed.
            When reusing <see cref="T:System.Net.Http.HttpClient"/> instances across connectors, pass 'false' for <paramref name="disposeHttpClient"/> to avoid <see cref="T:System.ObjectDisposedException"/>.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConnectorClient.#ctor(System.Uri,Microsoft.Rest.ServiceClientCredentials,System.Net.Http.HttpClient,System.Boolean,System.Net.Http.DelegatingHandler[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.ConnectorClient"/> class.
            </summary>
            <param name="baseUri">Base URI for the Bot Connector service.</param>
            <param name="credentials">Credentials for the Bot Connector service.</param>
            <param name="addJwtTokenRefresher">Deprecated, do not use.</param>
            <param name="customHttpClient">The HTTP client to use for this connector client.</param>
            <param name="handlers">Optional, an array of <see cref="T:System.Net.Http.DelegatingHandler"/> objects to
            add to the HTTP client pipeline.</param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConnectorClient.#ctor(System.Uri,Microsoft.Bot.Connector.Authentication.MicrosoftAppCredentials,System.Net.Http.HttpClientHandler,System.Boolean,System.Net.Http.HttpClient,System.Net.Http.DelegatingHandler[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.ConnectorClient"/> class.
            </summary>
            <param name="baseUri">Base URI for the Bot Connector service.</param>
            <param name="credentials">Credentials for the Bot Connector service.</param>
            <param name="httpClientHandler">The HTTP client message handler to use for this connector client.</param>
            <param name="addJwtTokenRefresher">Deprecated, do not use.</param>
            <param name="customHttpClient">The HTTP client to use for this connector client.</param>
            <param name="handlers">Optional, an array of <see cref="T:System.Net.Http.DelegatingHandler"/> objects to
            add to the HTTP client pipeline.</param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConnectorClient.GetOsVersion">
            <summary>Gets a description of the operating system of the Azure Bot Service.</summary>
            <returns>A description of the operating system of the Azure Bot Service.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConnectorClient.GetArchitecture">
            <summary>Gets the platform architecture of the Azure Bot Service.</summary>
            <returns>The platform architecture of the Azure Bot Service.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConnectorClient.GetASPNetVersion">
            <summary>Gets the name of the .NET Framework version of the Azure Bot Service..</summary>
            <returns>The name of the .NET Framework version of the Azure Bot Service.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConnectorClient.GetClientVersion``1(``0)">
            <summary>Gets the assembly version for the Azure Bot Service.</summary>
            <typeparam name="T">The type of REST service client to get the version of.</typeparam>
            <param name="client">The REST service client instance to get the version of.</param>
            <returns>The assembly version for the Azure Bot Service.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConnectorClient.AddDefaultRequestHeaders(System.Net.Http.HttpClient)">
            <summary>
            Configures an HTTP client to include default headers for the Bot Framework.
            </summary>
            <param name="httpClient">The HTTP client to configure.</param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConnectorClient.GetClientVersion">
            <summary>
            Gets the assembly version for this Bot Connector client.
            </summary>
            <returns>The assembly version for this Bot Connector client.</returns>
        </member>
        <member name="T:Microsoft.Bot.Connector.ConversationConstants">
            <summary>
            Values and constants used for Conversation specific info.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.ConversationConstants.ConversationIdHttpHeaderName">
            <summary>
            The name of Http Request Header to add Conversation Id to skills requests.
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.Conversations">
            <summary>
            Conversations operations.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Conversations.#ctor(Microsoft.Bot.Connector.ConnectorClient)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.Conversations"/> class.
            </summary>
            <param name='client'>
            Reference to the service client.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null.
            </exception>
        </member>
        <member name="P:Microsoft.Bot.Connector.Conversations.Client">
            <summary>
            Gets a reference to the ConnectorClient.
            </summary>
            <value>The refernce to the ClientConnector.</value>
        </member>
        <member name="M:Microsoft.Bot.Connector.Conversations.GetConversationsWithHttpMessagesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             GetConversations.
             </summary>
             <remarks>
             List the Conversations in which this bot has participated.
            
             GET from this method with a skip token
            
             The return value is a ConversationsResult, which contains an array of
             ConversationMembers and a skip token.  If the skip token is not empty, then
             there are further values to be returned. Call this method again with the
             returned token to get more values.
            
             Each ConversationMembers object contains the ID of the conversation and an
             array of ChannelAccounts that describe the members of the conversation.
             </remarks>
             <param name='continuationToken'>
             skip or continuation token.
             </param>
             <param name='customHeaders'>
             Headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Bot.Schema.ErrorResponseException">
             Thrown when the operation returned an invalid status code.
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response.
             </exception>
             <returns>
             A response object containing the response body and response headers.
             </returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Conversations.CreateConversationWithHttpMessagesAsync(Microsoft.Bot.Schema.ConversationParameters,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             CreateConversation.
             </summary>
             <remarks>
             Create a new Conversation.
            
             POST to this method with a
             * Bot being the bot creating the conversation
             * IsGroup set to true if this is not a direct message (default is false)
             * Array containing the members to include in the conversation
            
             The return value is a ResourceResponse which contains a conversation id
             which is suitable for use
             in the message payload and REST API uris.
            
             Most channels only support the semantics of bots initiating a direct
             message conversation.  An example of how to do that would be:
            
             ```
             var resource = await connector.conversations.CreateConversation(new
             ConversationParameters(){ Bot = bot, members = new ChannelAccount[] { new
             ChannelAccount("user1") } );
             await connect.Conversations.SendToConversationAsync(resource.Id, new
             Activity() ... ) ;
            
             ``` .
             </remarks>
             <param name='parameters'>
             Parameters to create the conversation from.
             </param>
             <param name='customHeaders'>
             Headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Bot.Schema.ErrorResponseException">
             Thrown when the operation returned an invalid status code.
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response.
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when an input value does not match the expected data type, range or pattern.
             </exception>
             <exception cref="T:System.ArgumentNullException">
             Thrown when a required parameter is null.
             </exception>
             <returns>
             A response object containing the response body and response headers.
             </returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Conversations.SendToConversationWithHttpMessagesAsync(System.String,Microsoft.Bot.Schema.Activity,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             SendToConversation.
             </summary>
             <remarks>
             This method allows you to send an activity to the end of a conversation.
            
             This is slightly different from ReplyToActivity().
             * SendToConversation(conversationId) - will append the activity to the end
             of the conversation according to the timestamp or semantics of the channel.
             * ReplyToActivity(conversationId,ActivityId) - adds the activity as a reply
             to another activity, if the channel supports it. If the channel does not
             support nested replies, ReplyToActivity falls back to SendToConversation.
            
             Use ReplyToActivity when replying to a specific activity in the
             conversation.
            
             Use SendToConversation in all other cases.
             </remarks>
             <param name='conversationId'>
             Conversation ID.
             </param>
             <param name='activity'>
             Activity to send.
             </param>
             <param name='customHeaders'>
             Headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Bot.Schema.ErrorResponseException">
             Thrown when the operation returned an invalid status code.
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response.
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when an input value does not match the expected data type, range or pattern.
             </exception>
             <exception cref="T:System.ArgumentNullException">
             Thrown when a required parameter is null.
             </exception>
             <returns>
             A response object containing the response body and response headers.
             </returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Conversations.SendConversationHistoryWithHttpMessagesAsync(System.String,Microsoft.Bot.Schema.Transcript,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             SendConversationHistory.
             </summary>
             <remarks>
             This method allows you to upload the historic activities to the
             conversation.
            
             Sender must ensure that the historic activities have unique ids and
             appropriate timestamps. The ids are used by the client to deal with
             duplicate activities and the timestamps are used by the client to render
             the activities in the right order.
             </remarks>
             <param name='conversationId'>
             Conversation ID.
             </param>
             <param name='transcript'>
             Transcript of activities.
             </param>
             <param name='customHeaders'>
             Headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Bot.Schema.ErrorResponseException">
             Thrown when the operation returned an invalid status code.
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response.
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when an input value does not match the expected data type, range or pattern.
             </exception>
             <exception cref="T:System.ArgumentNullException">
             Thrown when a required parameter is null.
             </exception>
             <returns>
             A response object containing the response body and response headers.
             </returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Conversations.UpdateActivityWithHttpMessagesAsync(System.String,System.String,Microsoft.Bot.Schema.Activity,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             UpdateActivity.
             </summary>
             <remarks>
             Edit an existing activity.
            
             Some channels allow you to edit an existing activity to reflect the new
             state of a bot conversation.
            
             For example, you can remove buttons after someone has clicked "Approve"
             button.
             </remarks>
             <param name='conversationId'>
             Conversation ID.
             </param>
             <param name='activityId'>
             activityId to update.
             </param>
             <param name='activity'>
             replacement Activity.
             </param>
             <param name='customHeaders'>
             Headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Bot.Schema.ErrorResponseException">
             Thrown when the operation returned an invalid status code.
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response.
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when an input value does not match the expected data type, range or pattern.
             </exception>
             <exception cref="T:System.ArgumentNullException">
             Thrown when a required parameter is null.
             </exception>
             <returns>
             A response object containing the response body and response headers.
             </returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Conversations.ReplyToActivityWithHttpMessagesAsync(System.String,System.String,Microsoft.Bot.Schema.Activity,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             ReplyToActivity.
             </summary>
             <remarks>
             This method allows you to reply to an activity.
            
             This is slightly different from SendToConversation().
             * SendToConversation(conversationId) - will append the activity to the end
             of the conversation according to the timestamp or semantics of the channel.
             * ReplyToActivity(conversationId,ActivityId) - adds the activity as a reply
             to another activity, if the channel supports it. If the channel does not
             support nested replies, ReplyToActivity falls back to SendToConversation.
            
             Use ReplyToActivity when replying to a specific activity in the
             conversation.
            
             Use SendToConversation in all other cases.
             </remarks>
             <param name='conversationId'>
             Conversation ID.
             </param>
             <param name='activityId'>
             activityId the reply is to (OPTIONAL).
             </param>
             <param name='activity'>
             Activity to send.
             </param>
             <param name='customHeaders'>
             Headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Bot.Schema.ErrorResponseException">
             Thrown when the operation returned an invalid status code.
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response.
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when an input value does not match the expected data type, range or pattern.
             </exception>
             <exception cref="T:System.ArgumentNullException">
             Thrown when a required parameter is null.
             </exception>
             <returns>
             A response object containing the response body and response headers.
             </returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Conversations.DeleteActivityWithHttpMessagesAsync(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             DeleteActivity.
             </summary>
             <remarks>
             Delete an existing activity.
            
             Some channels allow you to delete an existing activity, and if successful
             this method will remove the specified activity.
             </remarks>
             <param name='conversationId'>
             Conversation ID.
             </param>
             <param name='activityId'>
             activityId to delete.
             </param>
             <param name='customHeaders'>
             Headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Bot.Schema.ErrorResponseException">
             Thrown when the operation returned an invalid status code.
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when an input value does not match the expected data type, range or pattern.
             </exception>
             <exception cref="T:System.ArgumentNullException">
             Thrown when a required parameter is null.
             </exception>
             <returns>
             A response object containing the response body and response headers.
             </returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Conversations.GetConversationMembersWithHttpMessagesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             GetConversationMembers.
             </summary>
             <remarks>
             Enumerate the members of a conversation.
            
             This REST API takes a ConversationId and returns an array of ChannelAccount
             objects representing the members of the conversation.
             </remarks>
             <param name='conversationId'>
             Conversation ID.
             </param>
             <param name='customHeaders'>
             Headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Bot.Schema.ErrorResponseException">
             Thrown when the operation returned an invalid status code.
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response.
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when an input value does not match the expected data type, range or pattern.
             </exception>
             <exception cref="T:System.ArgumentNullException">
             Thrown when a required parameter is null.
             </exception>
             <returns>
             A response object containing the response body and response headers.
             </returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Conversations.GetConversationMemberWithHttpMessagesAsync(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             GetConversationMember.
             </summary>
             <remarks>
             Retrieves a single member of a conversation by ID.
            
             This REST API takes a ConversationId and a UserId and returns a ChannelAccount
             object for the members of the conversation.
             </remarks>
             <param name='userId'>
             User ID.
             </param>
             <param name='conversationId'>
             Conversation ID.
             </param>
             <param name='customHeaders'>
             Headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Bot.Schema.ErrorResponseException">
             Thrown when the operation returned an invalid status code.
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response.
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when an input value does not match the expected data type, range or pattern.
             </exception>
             <exception cref="T:System.ArgumentNullException">
             Thrown when a required parameter is null.
             </exception>
             <returns>
             A response object containing the response body and response headers.
             </returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Conversations.GetConversationPagedMembersWithHttpMessagesAsync(System.String,System.Nullable{System.Int32},System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             GetConversationPagedMembers.
             </summary>
             <remarks>
             Enumerate the members of a conversation one page at a time.
            
             This REST API takes a ConversationId. Optionally a pageSize and/or
             continuationToken can be provided. It returns a PagedMembersResult, which
             contains an array
             of ChannelAccounts representing the members of the conversation and a
             continuation token that can be used to get more values.
            
             One page of ChannelAccounts records are returned with each call. The number
             of records in a page may vary between channels and calls. The pageSize
             parameter can be used as
             a suggestion. If there are no additional results the response will not
             contain a continuation token. If there are no members in the conversation
             the Members will be empty or not present in the response.
            
             A response to a request that has a continuation token from a prior request
             may rarely return members from a previous request.
             </remarks>
             <param name='conversationId'>
             Conversation ID.
             </param>
             <param name='pageSize'>
             Suggested page size.
             </param>
             <param name='continuationToken'>
             Continuation Token.
             </param>
             <param name='customHeaders'>
             Headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Rest.HttpOperationException">
             Thrown when the operation returned an invalid status code.
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response.
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when an input value does not match the expected data type, range or pattern.
             </exception>
             <exception cref="T:System.ArgumentNullException">
             Thrown when a required parameter is null.
             </exception>
             <returns>
             A response object containing the response body and response headers.
             </returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Conversations.DeleteConversationMemberWithHttpMessagesAsync(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             DeleteConversationMember.
             </summary>
             <remarks>
             Deletes a member from a conversation.
            
             This REST API takes a ConversationId and a memberId (of type string) and
             removes that member from the conversation. If that member was the last
             member
             of the conversation, the conversation will also be deleted.
             </remarks>
             <param name='conversationId'>
             Conversation ID.
             </param>
             <param name='memberId'>
             ID of the member to delete from this conversation.
             </param>
             <param name='customHeaders'>
             Headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Bot.Schema.ErrorResponseException">
             Thrown when the operation returned an invalid status code.
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when an input value does not match the expected data type, range or pattern.
             </exception>
             <exception cref="T:System.ArgumentNullException">
             Thrown when a required parameter is null.
             </exception>
             <returns>
             A response object containing the response body and response headers.
             </returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Conversations.GetActivityMembersWithHttpMessagesAsync(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             GetActivityMembers.
             </summary>
             <remarks>
             Enumerate the members of an activity.
            
             This REST API takes a ConversationId and a ActivityId, returning an array
             of ChannelAccount objects representing the members of the particular
             activity in the conversation.
             </remarks>
             <param name='conversationId'>
             Conversation ID.
             </param>
             <param name='activityId'>
             Activity ID.
             </param>
             <param name='customHeaders'>
             Headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Bot.Schema.ErrorResponseException">
             Thrown when the operation returned an invalid status code.
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response.
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when an input value does not match the expected data type, range or pattern.
             </exception>
             <exception cref="T:System.ArgumentNullException">
             Thrown when a required parameter is null.
             </exception>
             <returns>
             A response object containing the response body and response headers.
             </returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Conversations.UploadAttachmentWithHttpMessagesAsync(System.String,Microsoft.Bot.Schema.AttachmentData,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             UploadAttachment.
             </summary>
             <remarks>
             Upload an attachment directly into a channel's blob storage.
            
             This is useful because it allows you to store data in a compliant store
             when dealing with enterprises.
            
             The response is a ResourceResponse which contains an AttachmentId which is
             suitable for using with the attachments API.
             </remarks>
             <param name='conversationId'>
             Conversation ID.
             </param>
             <param name='attachmentUpload'>
             Attachment data.
             </param>
             <param name='customHeaders'>
             Headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Bot.Schema.ErrorResponseException">
             Thrown when the operation returned an invalid status code.
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response.
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when an input value does not match the expected data type, range or pattern.
             </exception>
             <exception cref="T:System.ArgumentNullException">
             Thrown when a required parameter is null.
             </exception>
             <returns>
             A response object containing the response body and response headers.
             </returns>
        </member>
        <member name="T:Microsoft.Bot.Connector.ConversationsExtensions">
            <summary>
            ConversationsExtensions Conversation extensions.
            </summary>
            <summary>
            Extension methods for Conversations.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.CreateDirectConversation(Microsoft.Bot.Connector.IConversations,Microsoft.Bot.Schema.ChannelAccount,Microsoft.Bot.Schema.ChannelAccount,Microsoft.Bot.Schema.Activity)">
            <summary>
            Create a new direct conversation between a bot and a user.
            </summary>
            <param name='operations'>The operations group for this extension method.</param>
            <param name='bot'>Bot to create conversation from.</param>
            <param name='user'>User to create conversation with.</param>
            <param name="activity">(OPTIONAL) initial message to send to the new conversation.</param>
            <returns>ConversationResourceResponse.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.CreateDirectConversationAsync(Microsoft.Bot.Connector.IConversations,Microsoft.Bot.Schema.ChannelAccount,Microsoft.Bot.Schema.ChannelAccount,Microsoft.Bot.Schema.Activity,System.Threading.CancellationToken)">
            <summary>
            Create a new direct conversation between a bot and a user.
            </summary>
            <param name='operations'>The operations group for this extension method.</param>
            <param name='bot'>Bot to create conversation from.</param>
            <param name='user'>User to create conversation with.</param>
            <param name="activity">(OPTIONAL) initial message to send to the new conversation.</param>
            <param name='cancellationToken'>The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.CreateDirectConversation(Microsoft.Bot.Connector.IConversations,System.String,System.String,Microsoft.Bot.Schema.Activity)">
            <summary>
            Create a new direct conversation between a bot and a user.
            </summary>
            <param name='operations'>The operations group for this extension method.</param>
            <param name='botAddress'>Bot to create conversation from.</param>
            <param name='userAddress'>User to create conversation with.</param>
            <param name="activity">(OPTIONAL) initial message to send to the new conversation.</param>
            <returns>ConversationResourceResponse.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.CreateDirectConversationAsync(Microsoft.Bot.Connector.IConversations,System.String,System.String,Microsoft.Bot.Schema.Activity,System.Threading.CancellationToken)">
            <summary>
            Create a new direct conversation between a bot and a user.
            </summary>
            <param name='operations'>The operations group for this extension method.</param>
            <param name='botAddress'>Bot to create conversation from.</param>
            <param name='userAddress'>User to create conversation with.</param>
            <param name="activity">(OPTIONAL) initial message to send to the new conversation.</param>
            <param name='cancellationToken'>The cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.SendToConversation(Microsoft.Bot.Connector.IConversations,Microsoft.Bot.Schema.Activity)">
            <summary>
            Send an activity to a conversation.
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='activity'>
            Activity to send.
            </param>
            <returns>ResourceResponse.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.SendToConversationAsync(Microsoft.Bot.Connector.IConversations,Microsoft.Bot.Schema.Activity,System.Threading.CancellationToken)">
            <summary>
            Send an activity to a conversation.
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='activity'>
            Activity to send.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.ReplyToActivity(Microsoft.Bot.Connector.IConversations,Microsoft.Bot.Schema.Activity)">
            <summary>
            Replyto an activity in an existing conversation.
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='activity'>
            Activity to send.
            </param>
            <returns>ResourceResponse.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.ReplyToActivityAsync(Microsoft.Bot.Connector.IConversations,Microsoft.Bot.Schema.Activity,System.Threading.CancellationToken)">
            <summary>
            Reply to an activity in an existing conversation.
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='activity'>
            Activity to send.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.UpdateActivity(Microsoft.Bot.Connector.IConversations,Microsoft.Bot.Schema.Activity)">
            <summary>
            Update an activity in an existing conversation.
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='activity'>
            Activity to update.
            </param>
            <returns>ResourceResponse.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.UpdateActivityAsync(Microsoft.Bot.Connector.IConversations,Microsoft.Bot.Schema.Activity,System.Threading.CancellationToken)">
            <summary>
            Update an activity in an existing conversation.
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='activity'>
            Activity to update.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.GetConversationsAsync(Microsoft.Bot.Connector.IConversations,System.String,System.Threading.CancellationToken)">
             <summary>
             GetConversations.
             </summary>
             <remarks>
             List the Conversations in which this bot has participated.
            
             GET from this method with a skip token
            
             The return value is a ConversationsResult, which contains an array of
             ConversationMembers and a skip token.  If the skip token is not empty, then
             there are further values to be returned. Call this method again with the
             returned token to get more values.
            
             Each ConversationMembers object contains the ID of the conversation and an
             array of ChannelAccounts that describe the members of the conversation.
             </remarks>
             <param name='operations'>
             The operations group for this extension method.
             </param>
             <param name='continuationToken'>
             skip or continuation token.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <returns>The Conversation in which this bot has participated.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.CreateConversationAsync(Microsoft.Bot.Connector.IConversations,Microsoft.Bot.Schema.ConversationParameters,System.Threading.CancellationToken)">
             <summary>
             CreateConversation.
             </summary>
             <remarks>
             Create a new Conversation.
            
             POST to this method with a
             * Bot being the bot creating the conversation
             * IsGroup set to true if this is not a direct message (default is false)
             * Array containing the members to include in the conversation
            
             The return value is a ResourceResponse which contains a conversation id
             which is suitable for use
             in the message payload and REST API uris.
            
             Most channels only support the semantics of bots initiating a direct
             message conversation.  An example of how to do that would be:
            
             ```
             var resource = await connector.conversations.CreateConversation(new
             ConversationParameters(){ Bot = bot, members = new ChannelAccount[] { new
             ChannelAccount("user1") } );
             await connect.Conversations.SendToConversationAsync(resource.Id, new
             Activity() ... ) ;
            
             ```  .
             </remarks>
             <param name='operations'>
             The operations group for this extension method.
             </param>
             <param name='parameters'>
             Parameters to create the conversation from.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <returns>A new Conversation.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.SendToConversationAsync(Microsoft.Bot.Connector.IConversations,System.String,Microsoft.Bot.Schema.Activity,System.Threading.CancellationToken)">
             <summary>
             SendToConversation.
             </summary>
             <remarks>
             This method allows you to send an activity to the end of a conversation.
            
             This is slightly different from ReplyToActivity().
             * SendToConversation(conversationId) - will append the activity to the end
             of the conversation according to the timestamp or semantics of the channel.
             * ReplyToActivity(conversationId,ActivityId) - adds the activity as a reply
             to another activity, if the channel supports it. If the channel does not
             support nested replies, ReplyToActivity falls back to SendToConversation.
            
             Use ReplyToActivity when replying to a specific activity in the
             conversation.
            
             Use SendToConversation in all other cases.
             </remarks>
             <param name='operations'>
             The operations group for this extension method.
             </param>
             <param name='conversationId'>
             Conversation ID.
             </param>
             <param name='activity'>
             Activity to send.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <returns>The <see cref="T:Microsoft.Bot.Schema.ResourceResponse"/>.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.SendConversationHistoryAsync(Microsoft.Bot.Connector.IConversations,System.String,Microsoft.Bot.Schema.Transcript,System.Threading.CancellationToken)">
             <summary>
             SendConversationHistory.
             </summary>
             <remarks>
             This method allows you to upload the historic activities to the
             conversation.
            
             Sender must ensure that the historic activities have unique ids and
             appropriate timestamps. The ids are used by the client to deal with
             duplicate activities and the timestamps are used by the client to render
             the activities in the right order.
             </remarks>
             <param name='operations'>
             The operations group for this extension method.
             </param>
             <param name='conversationId'>
             Conversation ID.
             </param>
             <param name='transcript'>
             Transcript of activities.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <returns>The <see cref="T:Microsoft.Bot.Schema.ResourceResponse"/>.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.UpdateActivityAsync(Microsoft.Bot.Connector.IConversations,System.String,System.String,Microsoft.Bot.Schema.Activity,System.Threading.CancellationToken)">
             <summary>
             UpdateActivity.
             </summary>
             <remarks>
             Edit an existing activity.
            
             Some channels allow you to edit an existing activity to reflect the new
             state of a bot conversation.
            
             For example, you can remove buttons after someone has clicked "Approve"
             button.
             </remarks>
             <param name='operations'>
             The operations group for this extension method.
             </param>
             <param name='conversationId'>
             Conversation ID.
             </param>
             <param name='activityId'>
             activityId to update.
             </param>
             <param name='activity'>
             replacement Activity.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <returns>The <see cref="T:Microsoft.Bot.Schema.ResourceResponse"/>.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.ReplyToActivityAsync(Microsoft.Bot.Connector.IConversations,System.String,System.String,Microsoft.Bot.Schema.Activity,System.Threading.CancellationToken)">
             <summary>
             ReplyToActivity.
             </summary>
             <remarks>
             This method allows you to reply to an activity.
            
             This is slightly different from SendToConversation().
             * SendToConversation(conversationId) - will append the activity to the end
             of the conversation according to the timestamp or semantics of the channel.
             * ReplyToActivity(conversationId,ActivityId) - adds the activity as a reply
             to another activity, if the channel supports it. If the channel does not
             support nested replies, ReplyToActivity falls back to SendToConversation.
            
             Use ReplyToActivity when replying to a specific activity in the
             conversation.
            
             Use SendToConversation in all other cases.
             </remarks>
             <param name='operations'>
             The operations group for this extension method.
             </param>
             <param name='conversationId'>
             Conversation ID.
             </param>
             <param name='activityId'>
             activityId the reply is to (OPTIONAL).
             </param>
             <param name='activity'>
             Activity to send.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <returns>The <see cref="T:Microsoft.Bot.Schema.ResourceResponse"/>.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.DeleteActivityAsync(Microsoft.Bot.Connector.IConversations,System.String,System.String,System.Threading.CancellationToken)">
             <summary>
             DeleteActivity.
             </summary>
             <remarks>
             Delete an existing activity.
            
             Some channels allow you to delete an existing activity, and if successful
             this method will remove the specified activity.
             </remarks>
             <param name='operations'>
             The operations group for this extension method.
             </param>
             <param name='conversationId'>
             Conversation ID.
             </param>
             <param name='activityId'>
             activityId to delete.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <returns>A Task representing the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.GetConversationMembersAsync(Microsoft.Bot.Connector.IConversations,System.String,System.Threading.CancellationToken)">
             <summary>
             GetConversationMembers.
             </summary>
             <remarks>
             Enumerate the members of a conversation.
            
             This REST API takes a ConversationId and returns an array of ChannelAccount
             objects representing the members of the conversation.
             </remarks>
             <param name='operations'>
             The operations group for this extension method.
             </param>
             <param name='conversationId'>
             Conversation ID.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <returns>A collection of members of a conversation.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.GetConversationPagedMembersAsync(Microsoft.Bot.Connector.IConversations,System.String,System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
             <summary>
             GetConversationPagedMembers.
             </summary>
             <remarks>
             Enumerate the members of a conversation one page at a time.
            
             This REST API takes a ConversationId. Optionally a pageSize and/or
             continuationToken can be provided. It returns a PagedMembersResult, which
             contains an array
             of ChannelAccounts representing the members of the conversation and a
             continuation token that can be used to get more values.
            
             One page of ChannelAccounts records are returned with each call. The number
             of records in a page may vary between channels and calls. The pageSize
             parameter can be used as
             a suggestion. If there are no additional results the response will not
             contain a continuation token. If there are no members in the conversation
             the Members will be empty or not present in the response.
            
             A response to a request that has a continuation token from a prior request
             may rarely return members from a previous request.
             </remarks>
             <param name='operations'>
             The operations group for this extension method.
             </param>
             <param name='conversationId'>
             Conversation ID.
             </param>
             <param name='pageSize'>
             Suggested page size.
             </param>
             <param name='continuationToken'>
             Continuation Token.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <returns>The <see cref="T:Microsoft.Bot.Schema.PagedMembersResult"/>.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.DeleteConversationMemberAsync(Microsoft.Bot.Connector.IConversations,System.String,System.String,System.Threading.CancellationToken)">
             <summary>
             DeleteConversationMember.
             </summary>
             <remarks>
             Deletes a member from a conversation.
            
             This REST API takes a ConversationId and a memberId (of type string) and
             removes that member from the conversation. If that member was the last
             member
             of the conversation, the conversation will also be deleted.
             </remarks>
             <param name='operations'>
             The operations group for this extension method.
             </param>
             <param name='conversationId'>
             Conversation ID.
             </param>
             <param name='memberId'>
             ID of the member to delete from this conversation.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <returns>A Task representing the asynchronous operation for the task.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.GetActivityMembersAsync(Microsoft.Bot.Connector.IConversations,System.String,System.String,System.Threading.CancellationToken)">
             <summary>
             GetActivityMembers.
             </summary>
             <remarks>
             Enumerate the members of an activity.
            
             This REST API takes a ConversationId and a ActivityId, returning an array
             of ChannelAccount objects representing the members of the particular
             activity in the conversation.
             </remarks>
             <param name='operations'>
             The operations group for this extension method.
             </param>
             <param name='conversationId'>
             Conversation ID.
             </param>
             <param name='activityId'>
             Activity ID.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <returns>A collection of members of an activity.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.UploadAttachmentAsync(Microsoft.Bot.Connector.IConversations,System.String,Microsoft.Bot.Schema.AttachmentData,System.Threading.CancellationToken)">
             <summary>
             UploadAttachment.
             </summary>
             <remarks>
             Upload an attachment directly into a channel's blob storage.
            
             This is useful because it allows you to store data in a compliant store
             when dealing with enterprises.
            
             The response is a ResourceResponse which contains an AttachmentId which is
             suitable for using with the attachments API.
             </remarks>
             <param name='operations'>
             The operations group for this extension method.
             </param>
             <param name='conversationId'>
             Conversation ID.
             </param>
             <param name='attachmentUpload'>
             Attachment data.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <returns>The <see cref="T:Microsoft.Bot.Schema.ResourceResponse"/>.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.GetConversationMemberAsync(Microsoft.Bot.Connector.Conversations,System.String,System.String,System.Threading.CancellationToken)">
             <summary>
             GetConversationMember.
             </summary>
             <remarks>
             Enumerate the members of a conversation.
            
             This REST API takes a ConversationId and a UserId and returns a ChannelAccount
             object for the members of the conversation.
             </remarks>
             <param name='operations'>
             The operations group for this extension method.
             </param>
             <param name='userId'>
             User ID.
             </param>
             <param name='conversationId'>
             Conversation ID.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <returns>The conversation member.</returns>
        </member>
        <member name="T:Microsoft.Bot.Connector.IAttachments">
            <summary>
            Attachments operations.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.IAttachments.GetAttachmentInfoWithHttpMessagesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            GetAttachmentInfo.
            </summary>
            <remarks>
            Get AttachmentInfo structure describing the attachment views.
            </remarks>
            <param name='attachmentId'>
            attachment id.
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Bot.Schema.ErrorResponseException">
            Thrown when the operation returned an invalid status code.
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response.
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null.
            </exception>
            <returns>A task that represents the work queued to execute.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.IAttachments.GetAttachmentWithHttpMessagesAsync(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            GetAttachment.
            </summary>
            <remarks>
            Get the named view as binary content.
            </remarks>
            <param name='attachmentId'>
            attachment id.
            </param>
            <param name='viewId'>
            View id from attachmentInfo.
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Bot.Schema.ErrorResponseException">
            Thrown when the operation returned an invalid status code.
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response.
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null.
            </exception>
            <returns>A task that represents the work queued to execute.</returns>
        </member>
        <member name="T:Microsoft.Bot.Connector.IBotSignIn">
            <summary>
            BotSignIn operations.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.IBotSignIn.GetSignInUrlWithHttpMessagesAsync(System.String,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>Get sign-in URL with HTTP Message.</summary>
            <param name='state'>State.</param>
            <param name='codeChallenge'>Code challenge.</param>
            <param name='emulatorUrl'>Emulator URL.</param>
            <param name='finalRedirect'>Final redirect.</param>
            <param name='customHeaders'>The headers that will be added to request.</param>
            <param name='cancellationToken'>The cancellation token.</param>
            <exception cref="T:Microsoft.Rest.HttpOperationException">Thrown when the operation returned an invalid status code.</exception>
            <exception cref="T:Microsoft.Rest.SerializationException">Thrown when unable to deserialize the response.</exception>
            <exception cref="T:Microsoft.Rest.ValidationException">Thrown when a required parameter is null.</exception>
            <returns>A task that represents the work queued to execute.</returns>
        </member>
        <member name="T:Microsoft.Bot.Connector.IConnectorClient">
             <summary>
             The Bot Connector REST API allows your bot to send and receive messages
             to channels configured in the
             [Bot Framework Developer Portal](https://dev.botframework.com). The
             Connector service uses industry-standard REST
             and JSON over HTTPS.
            
             Client libraries for this REST API are available. See below for a list.
            
             Many bots will use both the Bot Connector REST API and the associated
             [Bot State REST API](/en-us/restapi/state). The
             Bot State REST API allows a bot to store and retrieve state associated
             with users and conversations.
            
             Authentication for both the Bot Connector and Bot State REST APIs is
             accomplished with JWT Bearer tokens, and is
             described in detail in the [Connector
             Authentication](/en-us/restapi/authentication) document.
            
             # Client Libraries for the Bot Connector REST API
            
             * [Bot Builder for C#](/en-us/csharp/builder/sdkreference/)
             * [Bot Builder for Node.js](/en-us/node/builder/overview/)
             * Generate your own from the [Connector API Swagger
             file](https://raw.githubusercontent.com/Microsoft/BotBuilder/master/CSharp/Library/Microsoft.Bot.Connector.Shared/Swagger/ConnectorAPI.json)
            
             © 2016 Microsoft.
             </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IConnectorClient.BaseUri">
            <summary>
            Gets or sets the base URI of the service.</summary>
            <value>See <see cref="T:System.Uri" /> class.</value>
        </member>
        <member name="P:Microsoft.Bot.Connector.IConnectorClient.SerializationSettings">
            <summary>Gets json serialization settings. </summary>
            <value>See <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> class.</value>
        </member>
        <member name="P:Microsoft.Bot.Connector.IConnectorClient.DeserializationSettings">
            <summary>Gets json deserialization settings.</summary>
            <value>See <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> class.</value>
        </member>
        <member name="P:Microsoft.Bot.Connector.IConnectorClient.Credentials">
            <summary> Gets subscription credentials, which uniquely identify client subscription.</summary>
            <value>See <see cref="T:Microsoft.Rest.ServiceClientCredentials" /> class.</value>
        </member>
        <member name="P:Microsoft.Bot.Connector.IConnectorClient.Attachments">
            <summary>
            Gets the IAttachments.</summary>
            <value>See <see cref="T:Microsoft.Bot.Connector.IAttachments" /> class.</value>
        </member>
        <member name="P:Microsoft.Bot.Connector.IConnectorClient.Conversations">
            <summary> Gets the IConversations.</summary>
            <value>See <see cref="T:Microsoft.Bot.Connector.IConversations"/> class.</value>
        </member>
        <member name="T:Microsoft.Bot.Connector.IConversations">
            <summary>
            Conversations operations.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.IConversations.GetConversationsWithHttpMessagesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             GetConversations.
             </summary>
             <remarks>
             List the Conversations in which this bot has participated.
            
             GET from this method with a skip token
            
             The return value is a ConversationsResult, which contains an array
             of ConversationMembers and a skip token.  If the skip token is not
             empty, then
             there are further values to be returned. Call this method again
             with the returned token to get more values.
            
             Each ConversationMembers object contains the ID of the conversation
             and an array of ChannelAccounts that describe the members of the
             conversation.
             </remarks>
             <param name='continuationToken'>
             skip or continuation token.
             </param>
             <param name='customHeaders'>
             The headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Bot.Schema.ErrorResponseException">
             Thrown when the operation returned an invalid status code.
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response.
             </exception>
             <returns>A task that represents the <see cref="T:Microsoft.Rest.HttpOperationResponse"/>.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.IConversations.CreateConversationWithHttpMessagesAsync(Microsoft.Bot.Schema.ConversationParameters,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             CreateConversation.
             </summary>
             <remarks>
             Create a new Conversation.
            
             POST to this method with a
             * Bot being the bot creating the conversation
             * IsGroup set to true if this is not a direct message (default is
             false)
             * Array containing the members to include in the conversation
            
             The return value is a ResourceResponse which contains a
             conversation id which is suitable for use
             in the message payload and REST API uris.
            
             Most channels only support the semantics of bots initiating a
             direct message conversation.  An example of how to do that would
             be:
            
             ```
             var resource = await connector.conversations.CreateConversation(new
             ConversationParameters(){ Bot = bot, members = new ChannelAccount[]
             { new ChannelAccount("user1") } );
             await connect.Conversations.SendToConversationAsync(resource.Id,
             new Activity() ... ) ;
            
             ``` .
             </remarks>
             <param name='parameters'>
             Parameters to create the conversation from.
             </param>
             <param name='customHeaders'>
             The headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Bot.Schema.ErrorResponseException">
             Thrown when the operation returned an invalid status code.
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response.
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when a required parameter is null.
             </exception>
             <returns>A task that represents the <see cref="T:Microsoft.Rest.HttpOperationResponse"/>.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.IConversations.SendToConversationWithHttpMessagesAsync(System.String,Microsoft.Bot.Schema.Activity,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             SendToConversation.
             </summary>
             <remarks>
             This method allows you to send an activity to the end of a
             conversation.
            
             This is slightly different from ReplyToActivity().
             * SendToConversation(conversationId) - will append the activity to
             the end of the conversation according to the timestamp or semantics
             of the channel.
             * ReplyToActivity(conversationId,ActivityId) - adds the activity as
             a reply to another activity, if the channel supports it. If the
             channel does not support nested replies, ReplyToActivity falls back
             to SendToConversation.
            
             Use ReplyToActivity when replying to a specific activity in the
             conversation.
            
             Use SendToConversation in all other cases.
             </remarks>
             <param name='conversationId'>
             Conversation ID.
             </param>
             <param name='activity'>
             Activity to send.
             </param>
             <param name='customHeaders'>
             The headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Bot.Schema.ErrorResponseException">
             Thrown when the operation returned an invalid status code.
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response.
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when a required parameter is null.
             </exception>
             <returns>A task that represents the <see cref="T:Microsoft.Rest.HttpOperationResponse"/>.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.IConversations.SendConversationHistoryWithHttpMessagesAsync(System.String,Microsoft.Bot.Schema.Transcript,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             SendConversationHistory.
             </summary>
             <remarks>
             This method allows you to upload the historic activities to the
             conversation.
            
             Sender must ensure that the historic activities have unique ids and
             appropriate timestamps. The ids are used by the client to deal with
             duplicate activities and the timestamps are used by the client to
             render the activities in the right order.
             </remarks>
             <param name='conversationId'>
             Conversation ID.
             </param>
             <param name='transcript'>
             Transcript of activities.
             </param>
             <param name='customHeaders'>
             The headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Bot.Schema.ErrorResponseException">
             Thrown when the operation returned an invalid status code.
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response.
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when a required parameter is null.
             </exception>
             <returns>A task that represents the <see cref="T:Microsoft.Rest.HttpOperationResponse"/>.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.IConversations.UpdateActivityWithHttpMessagesAsync(System.String,System.String,Microsoft.Bot.Schema.Activity,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             UpdateActivity.
             </summary>
             <remarks>
             Edit an existing activity.
            
             Some channels allow you to edit an existing activity to reflect the
             new state of a bot conversation.
            
             For example, you can remove buttons after someone has clicked
             "Approve" button.
             </remarks>
             <param name='conversationId'>
             Conversation ID.
             </param>
             <param name='activityId'>
             activityId to update.
             </param>
             <param name='activity'>
             replacement Activity.
             </param>
             <param name='customHeaders'>
             The headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Bot.Schema.ErrorResponseException">
             Thrown when the operation returned an invalid status code.
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response.
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when a required parameter is null.
             </exception>
             <returns>A task that represents the <see cref="T:Microsoft.Rest.HttpOperationResponse"/>.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.IConversations.ReplyToActivityWithHttpMessagesAsync(System.String,System.String,Microsoft.Bot.Schema.Activity,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             ReplyToActivity.
             </summary>
             <remarks>
             This method allows you to reply to an activity.
            
             This is slightly different from SendToConversation().
             * SendToConversation(conversationId) - will append the activity to
             the end of the conversation according to the timestamp or semantics
             of the channel.
             * ReplyToActivity(conversationId,ActivityId) - adds the activity as
             a reply to another activity, if the channel supports it. If the
             channel does not support nested replies, ReplyToActivity falls back
             to SendToConversation.
            
             Use ReplyToActivity when replying to a specific activity in the
             conversation.
            
             Use SendToConversation in all other cases.
             </remarks>
             <param name='conversationId'>
             Conversation ID.
             </param>
             <param name='activityId'>
             activityId the reply is to (OPTIONAL).
             </param>
             <param name='activity'>
             Activity to send.
             </param>
             <param name='customHeaders'>
             The headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Bot.Schema.ErrorResponseException">
             Thrown when the operation returned an invalid status code.
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response.
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when a required parameter is null.
             </exception>
             <returns>A task that represents the <see cref="T:Microsoft.Rest.HttpOperationResponse"/>.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.IConversations.DeleteActivityWithHttpMessagesAsync(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             DeleteActivity.
             </summary>
             <remarks>
             Delete an existing activity.
            
             Some channels allow you to delete an existing activity, and if
             successful this method will remove the specified activity.
             </remarks>
             <param name='conversationId'>
             Conversation ID.
             </param>
             <param name='activityId'>
             activityId to delete.
             </param>
             <param name='customHeaders'>
             The headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Bot.Schema.ErrorResponseException">
             Thrown when the operation returned an invalid status code.
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when a required parameter is null.
             </exception>
             <returns>A task that represents the <see cref="T:Microsoft.Rest.HttpOperationResponse"/>.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.IConversations.GetConversationMembersWithHttpMessagesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             GetConversationMembers.
             </summary>
             <remarks>
             Enumerate the members of a conversation.
            
             This REST API takes a ConversationId and returns an array of
             ChannelAccount objects representing the members of the
             conversation.
             </remarks>
             <param name='conversationId'>
             Conversation ID.
             </param>
             <param name='customHeaders'>
             The headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Bot.Schema.ErrorResponseException">
             Thrown when the operation returned an invalid status code.
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response.
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when a required parameter is null.
             </exception>
             <returns>A task that represents the <see cref="T:Microsoft.Rest.HttpOperationResponse"/>.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.IConversations.GetConversationPagedMembersWithHttpMessagesAsync(System.String,System.Nullable{System.Int32},System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             GetConversationPagedMembers.
             </summary>
             <remarks>
             Enumerate the members of a conversation one page at a time.
            
             This REST API takes a ConversationId. Optionally a pageSize and/or
             continuationToken can be provided. It returns a PagedMembersResult,
             which contains an array
             of ChannelAccounts representing the members of the conversation and
             a continuation token that can be used to get more values.
            
             One page of ChannelAccounts records are returned with each call.
             The number of records in a page may vary between channels and
             calls. The pageSize parameter can be used as
             a suggestion. If there are no additional results the response will
             not contain a continuation token. If there are no members in the
             conversation the Members will be empty or not present in the
             response.
            
             A response to a request that has a continuation token from a prior
             request may rarely return members from a previous request.
             </remarks>
             <param name='conversationId'>
             Conversation ID.
             </param>
             <param name='pageSize'>
             Suggested page size.
             </param>
             <param name='continuationToken'>
             Continuation Token.
             </param>
             <param name='customHeaders'>
             The headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Rest.HttpOperationException">
             Thrown when the operation returned an invalid status code.
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response.
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when a required parameter is null.
             </exception>
             <returns>A task that represents the <see cref="T:Microsoft.Rest.HttpOperationResponse"/>.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.IConversations.DeleteConversationMemberWithHttpMessagesAsync(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             DeleteConversationMember.
             </summary>
             <remarks>
             Deletes a member from a conversation.
            
             This REST API takes a ConversationId and a memberId (of type
             string) and removes that member from the conversation. If that
             member was the last member
             of the conversation, the conversation will also be deleted.
             </remarks>
             <param name='conversationId'>
             Conversation ID.
             </param>
             <param name='memberId'>
             ID of the member to delete from this conversation.
             </param>
             <param name='customHeaders'>
             The headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Bot.Schema.ErrorResponseException">
             Thrown when the operation returned an invalid status code.
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when a required parameter is null.
             </exception>
             <returns>A task that represents the <see cref="T:Microsoft.Rest.HttpOperationResponse"/>.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.IConversations.GetActivityMembersWithHttpMessagesAsync(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             GetActivityMembers.
             </summary>
             <remarks>
             Enumerate the members of an activity.
            
             This REST API takes a ConversationId and a ActivityId, returning an
             array of ChannelAccount objects representing the members of the
             particular activity in the conversation.
             </remarks>
             <param name='conversationId'>
             Conversation ID.
             </param>
             <param name='activityId'>
             Activity ID.
             </param>
             <param name='customHeaders'>
             The headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Bot.Schema.ErrorResponseException">
             Thrown when the operation returned an invalid status code.
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response.
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when a required parameter is null.
             </exception>
             <returns>A task that represents the <see cref="T:Microsoft.Rest.HttpOperationResponse"/>.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.IConversations.UploadAttachmentWithHttpMessagesAsync(System.String,Microsoft.Bot.Schema.AttachmentData,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             UploadAttachment.
             </summary>
             <remarks>
             Upload an attachment directly into a channel's blob storage.
            
             This is useful because it allows you to store data in a compliant
             store when dealing with enterprises.
            
             The response is a ResourceResponse which contains an AttachmentId
             which is suitable for using with the attachments API.
             </remarks>
             <param name='conversationId'>
             Conversation ID.
             </param>
             <param name='attachmentUpload'>
             Attachment data.
             </param>
             <param name='customHeaders'>
             The headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Bot.Schema.ErrorResponseException">
             Thrown when the operation returned an invalid status code.
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response.
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when a required parameter is null.
             </exception>
             <returns>A task that represents the <see cref="T:Microsoft.Rest.HttpOperationResponse"/>.</returns>
        </member>
        <member name="T:Microsoft.Bot.Connector.IOAuthClient">
            <summary>IOAuthClient. </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IOAuthClient.BaseUri">
            <summary> Gets or sets the base URI of the service. </summary>
            <value>The base URI.</value>
        </member>
        <member name="P:Microsoft.Bot.Connector.IOAuthClient.SerializationSettings">
            <summary> Gets json serialization settings. </summary>
            <value>The serialization settings.</value>
        </member>
        <member name="P:Microsoft.Bot.Connector.IOAuthClient.DeserializationSettings">
            <summary> Gets the json deserialization settings. </summary>
            <value>The deserialization settings.</value>
        </member>
        <member name="P:Microsoft.Bot.Connector.IOAuthClient.Credentials">
            <summary> Gets subscription credentials which uniquely identify client subscription. </summary>
            <value> The client credentials.</value>
        </member>
        <member name="P:Microsoft.Bot.Connector.IOAuthClient.BotSignIn">
            <summary> Gets the IBotSignIn. </summary>
            <value> The bot sign-in. </value>
        </member>
        <member name="P:Microsoft.Bot.Connector.IOAuthClient.UserToken">
            <summary> Gets the IUserToken. </summary>
            <value>The <see cref="P:Microsoft.Bot.Connector.IOAuthClient.UserToken"/>.</value>
        </member>
        <member name="T:Microsoft.Bot.Connector.IUserToken">
            <summary>
            UserToken operations.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.IUserToken.GetTokenWithHttpMessagesAsync(System.String,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary> Get token with HTTP message.</summary>
            <param name='userId'> User ID.</param>
            <param name='connectionName'> Connection name.</param>
            <param name='channelId'> Channel ID.</param>
            <param name='code'> Code.</param>
            <param name='customHeaders'> The headers that will be added to request.</param>
            <param name='cancellationToken'> The cancellation token.</param>
            <exception cref="T:Microsoft.Bot.Schema.ErrorResponseException"> Thrown when the operation returned an invalid status code.</exception>
            <exception cref="T:Microsoft.Rest.SerializationException"> Thrown when unable to deserialize the response. </exception>
            <exception cref="T:Microsoft.Rest.ValidationException"> Thrown when a required parameter is null. </exception>
            <returns>A Task representing the <see cref="T:Microsoft.Bot.Schema.TokenResponse"/> of the HTTP operation.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.IUserToken.GetAadTokensWithHttpMessagesAsync(System.String,System.String,Microsoft.Bot.Schema.AadResourceUrls,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>Get AAD token with HTTP message.</summary>
            <param name='userId'> User ID.</param>
            <param name='connectionName'> Connection name.</param>
            <param name='aadResourceUrls'>AAD resource URLs. </param>
            <param name='channelId'>The channel ID. </param>
            <param name='customHeaders'> The headers that will be added to request. </param>
            <param name='cancellationToken'> The cancellation token.</param>
            <exception cref="T:Microsoft.Bot.Schema.ErrorResponseException"> Thrown when the operation returned an invalid status code.</exception>
            <exception cref="T:Microsoft.Rest.SerializationException"> Thrown when unable to deserialize the response. </exception>
            <exception cref="T:Microsoft.Rest.ValidationException"> Thrown when a required parameter is null.</exception>
            <returns>A Task representing the <see cref="T:Microsoft.Bot.Schema.TokenResponse"/> of the HTTP operation.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.IUserToken.SignOutWithHttpMessagesAsync(System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>Sign out with HTTP message.</summary>
            <param name='userId'> User ID.</param>
            <param name='connectionName'>Connection name. </param>
            <param name='channelId'> Channel ID. </param>
            <param name='customHeaders'> The headers that will be added to request. </param>
            <param name='cancellationToken'> The cancellation token. </param>
            <exception cref="T:Microsoft.Bot.Schema.ErrorResponseException"> Thrown when the operation returned an invalid status code. </exception>
            <exception cref="T:Microsoft.Rest.SerializationException"> Thrown when unable to deserialize the response. </exception>
            <exception cref="T:Microsoft.Rest.ValidationException"> Thrown when a required parameter is null. </exception>
            <returns>A Task representing the <see cref="T:Microsoft.Rest.HttpOperationResponse"/>.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.IUserToken.GetTokenStatusWithHttpMessagesAsync(System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>Get the token status with HTTP message. </summary>
            <param name='userId'> User ID.</param>
            <param name='channelId'> Channel ID.</param>
            <param name='include'> Include.</param>
            <param name='customHeaders'> The headers that will be added to request. </param>
            <param name='cancellationToken'> The cancellation token. </param>
            <exception cref="T:Microsoft.Bot.Schema.ErrorResponseException"> Thrown when the operation returned an invalid status code. </exception>
            <exception cref="T:Microsoft.Rest.SerializationException"> Thrown when unable to deserialize the response. </exception>
            <exception cref="T:Microsoft.Rest.ValidationException"> Thrown when a required parameter is null. </exception>
            <returns>A task representing an IList of <see cref="T:Microsoft.Bot.Schema.TokenStatus"/> from the HTTP operation.</returns>
        </member>
        <member name="T:Microsoft.Bot.Connector.OAuthClient">
            <summary> An OAuth client class that implements <see cref="T:Microsoft.Bot.Connector.IOAuthClient"/>. </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.OAuthClient.#ctor(Microsoft.Rest.ServiceClientCredentials,System.Net.Http.DelegatingHandler[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.OAuthClient"/> class.
            </summary>
            <param name='credentials'>
            Required. Subscription credentials which uniquely identify client subscription.
            </param>
            <param name='handlers'>
            Optional. The delegating handlers to add to the http client pipeline.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null.
            </exception>
        </member>
        <member name="M:Microsoft.Bot.Connector.OAuthClient.#ctor(Microsoft.Rest.ServiceClientCredentials,System.Net.Http.HttpClient,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.OAuthClient"/> class.
            </summary>
            <param name='credentials'>
            Required. Subscription credentials which uniquely identify client subscription.
            </param>
            <param name='httpClient'>
            HttpClient to be used.
            </param>
            <param name='disposeHttpClient'>
            True: will dispose the provided httpClient on calling OAuthClient.Dispose(). False: will not dispose provided httpClient.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null.
            </exception>
        </member>
        <member name="M:Microsoft.Bot.Connector.OAuthClient.#ctor(Microsoft.Rest.ServiceClientCredentials,System.Net.Http.HttpClientHandler,System.Net.Http.DelegatingHandler[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.OAuthClient"/> class.
            </summary>
            <param name='credentials'>
            Required. Subscription credentials which uniquely identify client subscription.
            </param>
            <param name='rootHandler'>
            Optional. The http client handler used to handle http transport.
            </param>
            <param name='handlers'>
            Optional. The delegating handlers to add to the http client pipeline.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null.
            </exception>
        </member>
        <member name="M:Microsoft.Bot.Connector.OAuthClient.#ctor(System.Uri,Microsoft.Rest.ServiceClientCredentials,System.Net.Http.DelegatingHandler[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.OAuthClient"/> class.
            </summary>
            <param name='baseUri'>
            Optional. The base URI of the service.
            </param>
            <param name='credentials'>
            Required. Subscription credentials which uniquely identify client subscription.
            </param>
            <param name='handlers'>
            Optional. The delegating handlers to add to the http client pipeline.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null.
            </exception>
        </member>
        <member name="M:Microsoft.Bot.Connector.OAuthClient.#ctor(System.Uri,Microsoft.Rest.ServiceClientCredentials,System.Net.Http.HttpClientHandler,System.Net.Http.DelegatingHandler[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.OAuthClient"/> class.
            </summary>
            <param name='baseUri'>
            Optional. The base URI of the service.
            </param>
            <param name='credentials'>
            Required. Subscription credentials which uniquely identify client subscription.
            </param>
            <param name='rootHandler'>
            Optional. The http client handler used to handle http transport.
            </param>
            <param name='handlers'>
            Optional. The delegating handlers to add to the http client pipeline.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null.
            </exception>
        </member>
        <member name="M:Microsoft.Bot.Connector.OAuthClient.#ctor(System.Net.Http.HttpClient,System.Boolean)">
            <summary> Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.OAuthClient"/> class. </summary>
            <param name='httpClient'> HttpClient to be used. </param>
            <param name='disposeHttpClient'> True: will dispose the provided httpClient on calling OAuthClient.Dispose(). False: will not dispose provided httpClient. </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.OAuthClient.#ctor(System.Net.Http.DelegatingHandler[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.OAuthClient"/> class.
            </summary>
            <param name='handlers'>
            Optional. The delegating handlers to add to the http client pipeline.
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.OAuthClient.#ctor(System.Net.Http.HttpClientHandler,System.Net.Http.DelegatingHandler[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.OAuthClient"/> class.
            </summary>
            <param name='rootHandler'>
            Optional. The http client handler used to handle http transport.
            </param>
            <param name='handlers'>
            Optional. The delegating handlers to add to the http client pipeline.
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.OAuthClient.#ctor(System.Uri,System.Net.Http.DelegatingHandler[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.OAuthClient"/> class.
            </summary>
            <param name='baseUri'>
            Optional. The base URI of the service.
            </param>
            <param name='handlers'>
            Optional. The delegating handlers to add to the http client pipeline.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null.
            </exception>
        </member>
        <member name="M:Microsoft.Bot.Connector.OAuthClient.#ctor(System.Uri,System.Net.Http.HttpClientHandler,System.Net.Http.DelegatingHandler[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.OAuthClient"/> class.
            </summary>
            <param name='baseUri'>
            Optional. The base URI of the service.
            </param>
            <param name='rootHandler'>
            Optional. The http client handler used to handle http transport.
            </param>
            <param name='handlers'>
            Optional. The delegating handlers to add to the http client pipeline.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null.
            </exception>
        </member>
        <member name="P:Microsoft.Bot.Connector.OAuthClient.BaseUri">
            <summary> Gets or sets the base URI of the service. </summary>
            <value> The base URI. </value>
        </member>
        <member name="P:Microsoft.Bot.Connector.OAuthClient.SerializationSettings">
            <summary> Gets json serialization settings. </summary>
            <value>The serialization settings.</value>
        </member>
        <member name="P:Microsoft.Bot.Connector.OAuthClient.DeserializationSettings">
            <summary> Gets json deserialization settings. </summary>
            <value> The deserialization settings. </value>
        </member>
        <member name="P:Microsoft.Bot.Connector.OAuthClient.Credentials">
            <summary> Gets subscription credentials which uniquely identify client subscription. </summary>
            <value>The client credentials. </value>
        </member>
        <member name="P:Microsoft.Bot.Connector.OAuthClient.BotSignIn">
            <summary> Gets the IBotSignIn. </summary>
            <value> A class that performs bot sign-in operations. </value>
        </member>
        <member name="P:Microsoft.Bot.Connector.OAuthClient.UserToken">
            <summary> Gets the IUserToken. </summary>
            <value> The <see cref="P:Microsoft.Bot.Connector.OAuthClient.UserToken"/>. </value>
        </member>
        <member name="M:Microsoft.Bot.Connector.OAuthClient.ExchangeAsyncWithHttpMessagesAsync(System.String,System.String,System.String,Microsoft.Bot.Schema.TokenExchangeRequest,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>Exchange with HTTP message.</summary>
            <param name='userId'> User ID. </param>
            <param name='connectionName'> Connection name. </param>
            <param name='channelId'> Channel ID. </param>
            <param name='exchangeRequest'> Exechange request. </param>
            <param name='customHeaders'> Headers that will be added to request.</param>
            <param name='cancellationToken'> The cancellation token. </param>
            <exception cref="T:Microsoft.Bot.Schema.ErrorResponseException"> Thrown when the operation returned an invalid status code. </exception>
            <exception cref="T:Microsoft.Rest.SerializationException"> Thrown when unable to deserialize the response. </exception>
            <exception cref="T:Microsoft.Rest.ValidationException"> Thrown when an input value does not match the expected data type, range or pattern. </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown when a required parameter is null. </exception>
            <return> A response object containing the response body and response headers. </return>
            <returns> A task that represents the work queued to execute.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.OAuthClient.GetSignInResourceWithHttpMessagesAsync(System.String,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary> Get sign-in resource with HTTP message. </summary>
            <param name='state'> State. </param>
            <param name='codeChallenge'> Code challenge. </param>
            <param name='emulatorUrl'> Emulator URL. </param>
            <param name='finalRedirect'> Final redirect. </param>
            <param name='customHeaders'> Headers that will be added to request. </param>
            <param name='cancellationToken'> The cancellation token. </param>
            <exception cref="T:Microsoft.Rest.HttpOperationException"> Thrown when the operation returned an invalid status code. </exception>
            <exception cref="T:Microsoft.Rest.SerializationException"> Thrown when unable to deserialize the response. </exception>
            <exception cref="T:Microsoft.Rest.ValidationException"> Thrown when an input value does not match the expected data type, range or pattern. </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown when a required parameter is null. </exception>
            <returns> A response object containing the response body and response headers. </returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.OAuthClient.Initialize">
            <summary>
            Initializes client properties.
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.OAuthClientConfig">
            <summary>
            A class containing OAuthClient configuration values.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.OAuthClientConfig.OAuthEndpoint">
            <summary>
            Gets or sets the default endpoint that is used for API requests.
            </summary>
            <value>
            The default endpoint that is used for API requests.
            </value>
        </member>
        <member name="P:Microsoft.Bot.Connector.OAuthClientConfig.EmulateOAuthCards">
            <summary>
            Gets or sets a value indicating whether when using the Emulator, whether to emulate the OAuthCard behavior or use connected flows.
            </summary>
            <value>
            When using the Emulator, whether to emulate the OAuthCard behavior or use connected flows.
            </value>
        </member>
        <member name="M:Microsoft.Bot.Connector.OAuthClientConfig.SendEmulateOAuthCardsAsync(Microsoft.Bot.Connector.OAuthClient,System.Boolean)">
            <summary>
            Send a dummy OAuth card when the bot is being used on the Emulator for testing without fetching a real token.
            </summary>
            <param name="client">client.</param>
            <param name="emulateOAuthCards">Indicates whether the Emulator should emulate the OAuth card.</param>
            <returns>A task that represents the work queued to execute.</returns>
        </member>
        <member name="T:Microsoft.Bot.Connector.OAuthClientOld">
            <summary>
            Service client to handle requests to the Bot Framework API service.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.OAuthClientOld.#ctor(Microsoft.Bot.Connector.ConnectorClient,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.OAuthClientOld"/> class.
            </summary>
            <param name="client">The Bot Connector REST client to use.</param>
            <param name="uri">The URL to use to get a token.</param>
        </member>
        <member name="P:Microsoft.Bot.Connector.OAuthClientOld.OAuthEndpoint">
            <summary>
            Gets or sets the default endpoint that is used for API requests.
            </summary>
            <value>
            The default endpoint that is used for API requests.
            </value>
        </member>
        <member name="P:Microsoft.Bot.Connector.OAuthClientOld.EmulateOAuthCards">
            <summary>
            Gets or sets a value indicating whether when using the Emulator, whether to emulate the OAuthCard behavior or use connected flows.
            </summary>
            <value>
            When using the Emulator, whether to emulate the OAuthCard behavior or use connected flows.
            </value>
        </member>
        <member name="M:Microsoft.Bot.Connector.OAuthClientOld.GetUserTokenAsync(System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Gets a user token for a given user and connection.
            </summary>
            <param name="userId">The user's ID.</param>
            <param name="connectionName">Name of the auth connection to use.</param>
            <param name="magicCode">The user entered code to validate.</param>
            <param name="customHeaders">customHeaders.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the task completes successfully, the <see cref="T:Microsoft.Bot.Schema.TokenResponse"/> contains the user token.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Connector.OAuthClientOld.SignOutUserAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Signs the user out of a connection.
            </summary>
            <param name="userId">The user's ID.</param>
            <param name="connectionName">Name of the auth connection to sign out of.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the task completes successfully, the response indicates whether the call to
            sign the user out was successful.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Connector.OAuthClientOld.GetSignInLinkAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get the raw signin link to be sent to the user for signin for a connection name.
            </summary>
            <param name="state">A serialized and encoded parameter of a TokenExchangeState parameter.</param>
            <param name="finalRedirect">The endpoint URL for the final page of a successful login attempt.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the task completes successfully and the call to the OAuth client is successful,
            the result contains the signin link.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Connector.OAuthClientOld.GetTokenStatusAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get the status of tokens for connections for this bot for a particular user.
            </summary>
            <param name="userId">User id.</param>
            <param name="includeFilter">A comma separated list of connections to include. If null, then all connections are returned.</param>
            <param name="cancellationToken">Cancellation Token.</param>
            <returns>TokenStatus.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.OAuthClientOld.GetAadTokensAsync(System.String,System.String,System.String[],System.Threading.CancellationToken)">
            <summary>
            Retrieve an Azure Active Directory token for particular AAD resources.
            </summary>
            <param name="userId">The user's ID.</param>
            <param name="connectionName">Name of the auth connection to use for AAD token exchange.</param>
            <param name="resourceUrls">The collection of resource URLs for which to get tokens.</param>
            <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
            <returns>A task that represents the work queued to execute.</returns>
            <remarks>If the task completes successfully, the response includes a collection of TokenResponse
            objects with the resourceUrl and its corresponding TokenResponse.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Connector.OAuthClientOld.SendEmulateOAuthCardsAsync(System.Boolean)">
            <summary>
            Send a dummy OAuth card when the bot is being used on the Emulator for testing without fetching a real token.
            </summary>
            <param name="emulateOAuthCards">Indicates whether the Emulator should emulate the OAuth card.</param>
            <returns>A task that represents the work queued to execute.</returns>
        </member>
        <member name="T:Microsoft.Bot.Connector.Teams.ITeamsConnectorClient">
             <summary>
             ﻿﻿The Bot Connector REST API extension for Microsoft Teams allows your
             bot to perform extended operations on to Microsoft Teams channel
             configured in the
             [Bot Framework Developer Portal](https://dev.botframework.com). The
             Connector service uses industry-standard REST and JSON over HTTPS.
            
             Client libraries for this REST API are available. See below for a list.
            
            
            
             Authentication for both the Bot Connector and Bot State REST APIs is
             accomplished with JWT Bearer tokens, and is
             described in detail in the [Connector
             Authentication](https://docs.botframework.com/en-us/restapi/authentication)
             document.
            
             # Client Libraries for the Bot Connector REST API
            
             * [Bot Builder for
             C#](https://docs.botframework.com/en-us/csharp/builder/sdkreference/)
             * [Bot Builder for
             Node.js](https://docs.botframework.com/en-us/node/builder/overview/)
            
             © 2016 Microsoft.
             </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Teams.ITeamsConnectorClient.BaseUri">
            <summary>
            Gets or sets the base URI of the service.
            </summary>
            <value>The base URI.</value>
        </member>
        <member name="P:Microsoft.Bot.Connector.Teams.ITeamsConnectorClient.SerializationSettings">
            <summary>
            Gets the JSON serialization settings.
            </summary>
            <value>The JSON serialization settings.</value>
        </member>
        <member name="P:Microsoft.Bot.Connector.Teams.ITeamsConnectorClient.DeserializationSettings">
            <summary>
            Gets the JSON deserialization settings.
            </summary>
            <value>the JSON deserialization settings.</value>
        </member>
        <member name="P:Microsoft.Bot.Connector.Teams.ITeamsConnectorClient.Credentials">
            <summary>
            Gets the subscription credentials which uniquely identify client
            subscription.
            </summary>
            <value>The subscription credentials.</value>
        </member>
        <member name="P:Microsoft.Bot.Connector.Teams.ITeamsConnectorClient.Teams">
            <summary>
            Gets the ITeamsOperations.
            </summary>
            <value>The ITeamsOperations.</value>
        </member>
        <member name="T:Microsoft.Bot.Connector.Teams.ITeamsOperations">
            <summary>
            TeamsOperations operations.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Teams.ITeamsOperations.FetchChannelListWithHttpMessagesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Fetches channel list for a given team.
            </summary>
            <param name='teamId'>
            Team Id.
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Rest.HttpOperationException">
            Thrown when the operation returned an invalid status code.
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response.
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null.
            </exception>
            <returns>The channel list for a given team.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Teams.ITeamsOperations.FetchTeamDetailsWithHttpMessagesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Fetches details related to a team.
            </summary>
            <param name='teamId'>
            Team Id.
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Rest.HttpOperationException">
            Thrown when the operation returned an invalid status code.
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response.
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null.
            </exception>
            <returns>The details related to a team.</returns>
        </member>
        <member name="T:Microsoft.Bot.Connector.Teams.TeamsConnectorClient">
             <summary>
             ﻿﻿The Bot Connector REST API extension for Microsoft Teams allows your
             bot to perform extended operations on to Microsoft Teams channel
             configured in the
             [Bot Framework Developer Portal](https://dev.botframework.com). The
             Connector service uses industry-standard REST and JSON over HTTPS.
            
             Client libraries for this REST API are available. See below for a list.
            
            
            
             Authentication for both the Bot Connector and Bot State REST APIs is
             accomplished with JWT Bearer tokens, and is
             described in detail in the [Connector
             Authentication](https://docs.botframework.com/en-us/restapi/authentication)
             document.
            
             # Client Libraries for the Bot Connector REST API
            
             * [Bot Builder for
             C#](https://docs.botframework.com/en-us/csharp/builder/sdkreference/)
             * [Bot Builder for
             Node.js](https://docs.botframework.com/en-us/node/builder/overview/)
            
             © 2016 Microsoft.
             </summary>
            <summary>
            Implements a client for the Teams Bot Connector service.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Teams.TeamsConnectorClient.#ctor(Microsoft.Rest.ServiceClientCredentials,System.Net.Http.DelegatingHandler[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.Teams.TeamsConnectorClient"/> class.
            </summary>
            <param name='credentials'>
            Required. Subscription credentials which uniquely identify client subscription.
            </param>
            <param name='handlers'>
            Optional. The delegating handlers to add to the http client pipeline.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null.
            </exception>
        </member>
        <member name="M:Microsoft.Bot.Connector.Teams.TeamsConnectorClient.#ctor(Microsoft.Rest.ServiceClientCredentials,System.Net.Http.HttpClientHandler,System.Net.Http.DelegatingHandler[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.Teams.TeamsConnectorClient"/> class.
            </summary>
            <param name='credentials'>
            Required. Subscription credentials which uniquely identify client subscription.
            </param>
            <param name='rootHandler'>
            Optional. The http client handler used to handle http transport.
            </param>
            <param name='handlers'>
            Optional. The delegating handlers to add to the http client pipeline.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null.
            </exception>
        </member>
        <member name="M:Microsoft.Bot.Connector.Teams.TeamsConnectorClient.#ctor(System.Uri,Microsoft.Rest.ServiceClientCredentials,System.Net.Http.DelegatingHandler[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.Teams.TeamsConnectorClient"/> class.
            </summary>
            <param name='baseUri'>
            Optional. The base URI of the service.
            </param>
            <param name='credentials'>
            Required. Subscription credentials which uniquely identify client subscription.
            </param>
            <param name='handlers'>
            Optional. The delegating handlers to add to the http client pipeline.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null.
            </exception>
        </member>
        <member name="M:Microsoft.Bot.Connector.Teams.TeamsConnectorClient.#ctor(System.Uri,Microsoft.Rest.ServiceClientCredentials,System.Net.Http.HttpClientHandler,System.Net.Http.DelegatingHandler[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.Teams.TeamsConnectorClient"/> class.
            </summary>
            <param name='baseUri'>
            Optional. The base URI of the service.
            </param>
            <param name='credentials'>
            Required. Subscription credentials which uniquely identify client subscription.
            </param>
            <param name='rootHandler'>
            Optional. The http client handler used to handle http transport.
            </param>
            <param name='handlers'>
            Optional. The delegating handlers to add to the http client pipeline.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null.
            </exception>
        </member>
        <member name="M:Microsoft.Bot.Connector.Teams.TeamsConnectorClient.#ctor(System.Net.Http.DelegatingHandler[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.Teams.TeamsConnectorClient"/> class.
            </summary>
            <param name='handlers'>
            Optional. The delegating handlers to add to the http client pipeline.
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.Teams.TeamsConnectorClient.#ctor(System.Net.Http.HttpClientHandler,System.Net.Http.DelegatingHandler[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.Teams.TeamsConnectorClient"/> class.
            </summary>
            <param name='rootHandler'>
            Optional. The http client handler used to handle http transport.
            </param>
            <param name='handlers'>
            Optional. The delegating handlers to add to the http client pipeline.
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.Teams.TeamsConnectorClient.#ctor(System.Uri,System.Net.Http.DelegatingHandler[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.Teams.TeamsConnectorClient"/> class.
            </summary>
            <param name='baseUri'>
            Optional. The base URI of the service.
            </param>
            <param name='handlers'>
            Optional. The delegating handlers to add to the http client pipeline.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null.
            </exception>
        </member>
        <member name="M:Microsoft.Bot.Connector.Teams.TeamsConnectorClient.#ctor(System.Uri,System.Net.Http.HttpClientHandler,System.Net.Http.DelegatingHandler[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.Teams.TeamsConnectorClient"/> class.
            </summary>
            <param name='baseUri'>
            Optional. The base URI of the service.
            </param>
            <param name='rootHandler'>
            Optional. The http client handler used to handle http transport.
            </param>
            <param name='handlers'>
            Optional. The delegating handlers to add to the http client pipeline.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null.
            </exception>
        </member>
        <member name="P:Microsoft.Bot.Connector.Teams.TeamsConnectorClient.BaseUri">
            <summary>
            Gets or sets the base URI of the service.
            </summary>
            <value>The base URI of the service.</value>
        </member>
        <member name="P:Microsoft.Bot.Connector.Teams.TeamsConnectorClient.SerializationSettings">
            <summary>
            Gets the JSON serialization settings.
            </summary>
            <value>The JSON serialization settings.</value>
        </member>
        <member name="P:Microsoft.Bot.Connector.Teams.TeamsConnectorClient.DeserializationSettings">
            <summary>
            Gets the JSON deserialization settings.
            </summary>
            <value>The JSON deserialization settings.</value>
        </member>
        <member name="P:Microsoft.Bot.Connector.Teams.TeamsConnectorClient.Credentials">
            <summary>
            Gets the subscription credentials which uniquely identify client subscription.
            </summary>
            <value>The subscription credentials.</value>
        </member>
        <member name="P:Microsoft.Bot.Connector.Teams.TeamsConnectorClient.Teams">
            <summary>
            Gets the ITeamsOperations.
            </summary>
            <value>The ITeamsOperations.</value>
        </member>
        <member name="M:Microsoft.Bot.Connector.Teams.TeamsConnectorClient.Initialize">
            <summary>
            Initializes client properties.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Teams.TeamsConnectorClient.#ctor(System.Uri,Microsoft.Rest.ServiceClientCredentials,System.Net.Http.HttpClient,System.Net.Http.DelegatingHandler[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.Teams.TeamsConnectorClient"/> class.
            </summary>
            <param name="baseUri">Base URI for the Bot Connector service.</param>
            <param name="credentials">Credentials for the Bot Connector service.</param>
            <param name="customHttpClient">The HTTP client to use for this connector client.</param>
            <param name="handlers">Optional, an array of <see cref="T:System.Net.Http.DelegatingHandler"/> objects to
            add to the HTTP client pipeline.</param>
        </member>
        <member name="M:Microsoft.Bot.Connector.Teams.TeamsConnectorClient.#ctor(System.Uri,Microsoft.Rest.ServiceClientCredentials,System.Net.Http.HttpClient,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.Teams.TeamsConnectorClient"/> class.
            </summary>
            <param name="baseUri">Base URI for the Bot Connector service.</param>
            <param name="credentials">Credentials for the Bot Connector service.</param>
            <param name="customHttpClient">The HTTP client to use for this connector client.</param>
            <param name="disposeHttpClient">Whether to dispose the <see cref="T:System.Net.Http.HttpClient"/>.</param>
            <remarks>Constructor specifically designed to be the one that allows control of the disposing of the custom <see cref="T:System.Net.Http.HttpClient"/>.
            <see cref="T:Microsoft.Rest.ServiceClient`1"/> only has one constructor that accepts control of the disposing of the <see cref="T:System.Net.Http.HttpClient"/>, so we call that overload here.
            All other overloads of <see cref="T:Microsoft.Bot.Connector.ConnectorClient"/> will not control this parameter and it will default to true, resulting on disposal of the provided <see cref="T:System.Net.Http.HttpClient"/> when the <see cref="T:Microsoft.Bot.Connector.ConnectorClient"/> is disposed.
            When reusing <see cref="T:System.Net.Http.HttpClient"/> instances across connectors, pass 'false' for <paramref name="disposeHttpClient"/> to avoid <see cref="T:System.ObjectDisposedException"/>.</remarks>
        </member>
        <member name="T:Microsoft.Bot.Connector.Teams.TeamsOperations">
            <summary>
            TeamsOperations operations.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Teams.TeamsOperations.#ctor(Microsoft.Bot.Connector.Teams.TeamsConnectorClient)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.Teams.TeamsOperations"/> class.
            </summary>
            <param name='client'>
            Reference to the service client.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null.
            </exception>
        </member>
        <member name="P:Microsoft.Bot.Connector.Teams.TeamsOperations.Client">
            <summary>
            Gets a reference to the TeamsConnectorClient.
            </summary>
            <value>The TeamsConnectorClient.</value>
        </member>
        <member name="M:Microsoft.Bot.Connector.Teams.TeamsOperations.FetchChannelListWithHttpMessagesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Fetches channel list for a given team.
            </summary>
            <remarks>
            Fetch the channel list.
            </remarks>
            <param name='teamId'>
            Team Id.
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Rest.HttpOperationException">
            Thrown when the operation returned an invalid status code.
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response.
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when an input value does not match the expected data type, range or pattern.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null.
            </exception>
            <returns>
            A response object containing the response body and response headers.
            </returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Teams.TeamsOperations.FetchTeamDetailsWithHttpMessagesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Fetches details related to a team.
            </summary>
            <param name='teamId'>
            Team Id.
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Rest.HttpOperationException">
            Thrown when the operation returned an invalid status code.
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response.
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when an input value does not match the expected data type, range or pattern.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null.
            </exception>
            <returns>
            A response object containing the response body and response headers.
            </returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Teams.TeamsOperations.FetchMeetingInfoWithHttpMessagesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Fetches details related to a meeting.
            </summary>
            <param name='meetingId'>
            Meeting Id, encoded as a BASE64 string.
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Rest.HttpOperationException">
            Thrown when the operation returned an invalid status code.
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response.
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when an input value does not match the expected data type, range or pattern.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null.
            </exception>
            <returns>
            A response object containing the response body and response headers.
            </returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Teams.TeamsOperations.FetchParticipantWithHttpMessagesAsync(System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Fetches Teams meeting participant details.
            </summary>
            <remarks>
            Fetches details for a meeting particpant.
            </remarks>
            <param name='meetingId'>
            Teams meeting id.
            </param>
            <param name='participantId'>
            Teams meeting participant id.
            </param>
            <param name='tenantId'>
            Teams meeting tenant id.
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Rest.HttpOperationException">
            Thrown when the operation returned an invalid status code.
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response.
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when an input value does not match the expected data type, range or pattern.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null.
            </exception>
            <returns>
            A response object containing the response body and response headers.
            </returns>
        </member>
        <member name="T:Microsoft.Bot.Connector.Teams.TeamsOperationsExtensions">
            <summary>
            Extension methods for TeamsOperations.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Teams.TeamsOperationsExtensions.FetchChannelListAsync(Microsoft.Bot.Connector.Teams.ITeamsOperations,System.String,System.Threading.CancellationToken)">
            <summary>
            Fetches channel list for a given team.
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='teamId'>
            Team Id.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <returns>The channel list for a given team.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Teams.TeamsOperationsExtensions.FetchTeamDetailsAsync(Microsoft.Bot.Connector.Teams.ITeamsOperations,System.String,System.Threading.CancellationToken)">
            <summary>
            Fetches details related to a team.
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='teamId'>
            Team Id.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <returns>The details related to a team.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Teams.TeamsOperationsExtensions.FetchMeetingInfoAsync(Microsoft.Bot.Connector.Teams.ITeamsOperations,System.String,System.Threading.CancellationToken)">
            <summary>
            Fetches information related to a Teams meeting.
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='meetingId'>
            Meeting Id.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <returns>The details related to a team.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Teams.TeamsOperationsExtensions.FetchParticipantAsync(Microsoft.Bot.Connector.Teams.ITeamsOperations,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Fetches participant details related to a Teams meeting.
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='meetingId'>
            Team meeting Id.
            </param>
            <param name='participantId'>
            Team meeting participant Id.
            </param>
            <param name='tenantId'>
            Team meeting tenant Id.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <returns>The participant details related to a Teams meeting.</returns>
        </member>
        <member name="T:Microsoft.Bot.Connector.UserToken">
            <summary> UserToken operations. </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.UserToken.#ctor(Microsoft.Bot.Connector.OAuthClient)">
            <summary> Initializes a new instance of the <see cref="T:Microsoft.Bot.Connector.UserToken"/> class. </summary>
            <param name='client'> Reference to the service client. </param>
            <exception cref="T:System.ArgumentNullException"> Thrown when a required parameter is null. </exception>
        </member>
        <member name="P:Microsoft.Bot.Connector.UserToken.Client">
            <summary> Gets a reference to the OAuthClient. </summary>
            <value> The OAuth client. </value>
        </member>
        <member name="M:Microsoft.Bot.Connector.UserToken.GetTokenWithHttpMessagesAsync(System.String,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary> Get token with HTTP message. </summary>
            <param name='userId'> User ID. </param>
            <param name='connectionName'> Connection name. </param>
            <param name='channelId'> Channel ID. </param>
            <param name='code'> Code. </param>
            <param name='customHeaders'> Headers that will be added to request. </param>
            <param name='cancellationToken'> The cancellation token. </param>
            <exception cref="T:Microsoft.Bot.Schema.ErrorResponseException"> Thrown when the operation returned an invalid status code. </exception>
            <exception cref="T:Microsoft.Rest.SerializationException"> Thrown when unable to deserialize the response. </exception>
            <exception cref="T:Microsoft.Rest.ValidationException"> Thrown when a required parameter is null. </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown when an input value does not match the expected data type, range or pattern. </exception>
            <returns> A response object containing the response body and response headers. </returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.UserToken.GetAadTokensWithHttpMessagesAsync(System.String,System.String,Microsoft.Bot.Schema.AadResourceUrls,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary> Get AAD Tokens with HTTP messages. </summary>
            <param name='userId'> User ID. </param>
            <param name='connectionName'> Connection name. </param>
            <param name='aadResourceUrls'> AAD resource URLs. </param>
            <param name='channelId'> Channel ID. </param>
            <param name='customHeaders'> Headers that will be added to request. </param>
            <param name='cancellationToken'> The cancellation token. </param>
            <exception cref="T:Microsoft.Bot.Schema.ErrorResponseException"> Thrown when the operation returned an invalid status code. </exception>
            <exception cref="T:Microsoft.Rest.SerializationException"> Thrown when unable to deserialize the response. </exception>
            <exception cref="T:Microsoft.Rest.ValidationException"> Thrown when a required parameter is null. </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown when an input value does not match the expected data type, range or pattern. </exception>
            <returns> A response object containing the response body and response headers. </returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.UserToken.SignOutWithHttpMessagesAsync(System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>Sign out with HTTP message. </summary>
            <param name='userId'> User ID. </param>
            <param name='connectionName'> Connection name. </param>
            <param name='channelId'> Channel ID.</param>
            <param name='customHeaders'> Headers that will be added to request. </param>
            <param name='cancellationToken'> The cancellation token. </param>
            <exception cref="T:Microsoft.Bot.Schema.ErrorResponseException"> Thrown when the operation returned an invalid status code. </exception>
            <exception cref="T:Microsoft.Rest.SerializationException"> Thrown when unable to deserialize the response. </exception>
            <exception cref="T:Microsoft.Rest.ValidationException"> Thrown when a required parameter is null. </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown when an input value does not match the expected data type, range or pattern. </exception>
            <returns> A response object containing the response body and response headers. </returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.UserToken.GetTokenStatusWithHttpMessagesAsync(System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary> Get Token Status with HTTP message. </summary>
            <param name='userId'> User ID. </param>
            <param name='channelId'> Channel ID. </param>
            <param name='include'> Include. </param>
            <param name='customHeaders'> Headers that will be added to request. </param>
            <param name='cancellationToken'> The cancellation token. </param>
            <exception cref="T:Microsoft.Bot.Schema.ErrorResponseException"> Thrown when the operation returned an invalid status code. </exception>
            <exception cref="T:Microsoft.Rest.SerializationException"> Thrown when unable to deserialize the response. </exception>
            <exception cref="T:Microsoft.Rest.ValidationException"> Thrown when an input value does not match the expected data type, range or pattern. </exception>
            <exception cref="T:System.ArgumentNullException"> Thrown when a required parameter is null. </exception>
            <returns> A response object containing the response body and response headers. </returns>
        </member>
        <member name="T:Microsoft.Bot.Connector.UserTokenExtensions">
            <summary>
            Extension methods for UserToken.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.UserTokenExtensions.GetTokenAsync(Microsoft.Bot.Connector.IUserToken,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> Get Token. </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='userId'> User ID. </param>
            <param name='connectionName'> Connection name. </param>
            <param name='channelId'> Channel ID. </param>
            <param name='code'> Code. </param>
            <param name='cancellationToken'> The cancellation token. </param>
            <returns> A task representing the token response. </returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.UserTokenExtensions.GetAadTokensAsync(Microsoft.Bot.Connector.IUserToken,System.String,System.String,Microsoft.Bot.Schema.AadResourceUrls,System.String,System.Threading.CancellationToken)">
            <summary> Get AAD Token. </summary>
            <param name='operations'> The operations group for this extension method. </param>
            <param name='userId'> User ID. </param>
            <param name='connectionName'> Connection name. </param>
            <param name='aadResourceUrls'> AAD Resource URLs. </param>
            <param name='channelId'> Channel ID. </param>
            <param name='cancellationToken'> The cancellation token. </param>
            <returns> A task representing an IDictionary of TokenResponses. </returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.UserTokenExtensions.SignOutAsync(Microsoft.Bot.Connector.IUserToken,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> Sign out. </summary>
            <param name='operations'> The operations group for this extension method. </param>
            <param name='userId'> User ID. </param>
            <param name='connectionName'> Connection name. </param>
            <param name='channelId'> Channel ID. </param>
            <param name='cancellationToken'> The cancellation token. </param>
            <returns> A task representing the work to be done. </returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.UserTokenExtensions.GetTokenStatusAsync(Microsoft.Bot.Connector.IUserToken,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> Get Token Status. </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='userId'> User ID. </param>
            <param name='channelId'> Channel ID. </param>
            <param name='include'> Include. </param>
            <param name='cancellationToken'> The cancellation token. </param>
            <returns> A task representing the token status. </returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.UserTokenExtensions.ExchangeAsyncAsync(Microsoft.Bot.Connector.OAuthClient,System.String,System.String,System.String,Microsoft.Bot.Schema.TokenExchangeRequest,System.Threading.CancellationToken)">
            <summary> Exchange. </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='userId'> User ID. </param>
            <param name='connectionName'> Connection name. </param>
            <param name='channelId'> Channel ID. </param>
            <param name='exchangeRequest'> Exchange request. </param>
            <param name='cancellationToken'> The cancellation token. </param>
            <returns> A task that represents the work queued to execute. </returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.Skills.BotFrameworkClient">
            <summary>
            A Bot Framework client.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Builder.Skills.BotFrameworkClient.PostActivityAsync(System.String,System.String,System.Uri,System.Uri,System.String,Microsoft.Bot.Schema.Activity,System.Threading.CancellationToken)">
            <summary>
            Forwards an activity to a skill (bot).
            </summary>
            <remarks>NOTE: Forwarding an activity to a skill will flush UserState and ConversationState changes so that skill has accurate state.</remarks>
            <param name="fromBotId">The MicrosoftAppId of the bot sending the activity.</param>
            <param name="toBotId">The MicrosoftAppId of the bot receiving the activity.</param>
            <param name="toUrl">The URL of the bot receiving the activity.</param>
            <param name="serviceUrl">The callback Url for the skill host.</param>
            <param name="conversationId">A conversation ID to use for the conversation with the skill.</param>
            <param name="activity">The <see cref="T:Microsoft.Bot.Schema.Activity"/> to send to forward.</param>
            <param name="cancellationToken">cancellation Token.</param>
            <returns>Async task with optional invokeResponse.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Skills.BotFrameworkClient.PostActivityAsync``1(System.String,System.String,System.Uri,System.Uri,System.String,Microsoft.Bot.Schema.Activity,System.Threading.CancellationToken)">
            <summary>
            Forwards an activity to a skill (bot).
            </summary>
            <remarks>NOTE: Forwarding an activity to a skill will flush UserState and ConversationState changes so that skill has accurate state.</remarks>
            <typeparam name="T">The type of body in the InvokeResponse.</typeparam>
            <param name="fromBotId">The MicrosoftAppId of the bot sending the activity.</param>
            <param name="toBotId">The MicrosoftAppId of the bot receiving the activity.</param>
            <param name="toUrl">The URL of the bot receiving the activity.</param>
            <param name="serviceUrl">The callback Url for the skill host.</param>
            <param name="conversationId">A conversation ID to use for the conversation with the skill.</param>
            <param name="activity">The <see cref="T:Microsoft.Bot.Schema.Activity"/> to send to forward.</param>
            <param name="cancellationToken">cancellation Token.</param>
            <returns>Async task with optional invokeResponse.</returns>
        </member>
        <member name="M:Microsoft.Bot.Builder.Skills.BotFrameworkClient.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Bot.Builder.Skills.BotFrameworkClient.Dispose(System.Boolean)">
            <summary>
            Protected implementation of dispose pattern.
            </summary>
            <param name="disposing">Indicates where this method is called from.</param>
        </member>
        <member name="T:Microsoft.Bot.Builder.InvokeResponse">
            <summary>
            A tuple class containing an HTTP status code and a JSON-serializable
            object. The HTTP status code is, in the invoke activity scenario, what will
            be set in the resulting POST. The body of the resulting POST will be
            the JSON-serialized content from the <see cref="P:Microsoft.Bot.Builder.InvokeResponse.Body"/> property.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Builder.InvokeResponse.Status">
            <summary>Gets or sets the HTTP status code for the response.</summary>
            <value>The HTTP status code.</value>
            <remarks>
            The POST that is generated in response to the incoming invoke activity
            will have the HTTP status code specified by this field.
            </remarks>
        </member>
        <member name="P:Microsoft.Bot.Builder.InvokeResponse.Body">
            <summary>Gets or sets the body content for the response.</summary>
            <value>The body content.</value>
            <remarks>
            The POST that is generated in response to the incoming invoke activity
            will have a body generated by JSON serializing the object in this field.
            </remarks>
        </member>
        <member name="M:Microsoft.Bot.Builder.InvokeResponse.IsSuccessStatusCode">
            <summary>
            Gets a value indicating whether the invoke response was successful.
            </summary>
            <returns>
            A value that indicates if the HTTP response was successful.
            true if <see cref="P:Microsoft.Bot.Builder.InvokeResponse.Status"/> was in the Successful range (200-299); otherwise false.
            </returns>
        </member>
        <member name="T:Microsoft.Bot.Builder.InvokeResponse`1">
            <summary>
            A tuple class containing an HTTP status code and a JSON-serializable
            object. The HTTP status code is, in the invoke activity scenario, what will
            be set in the resulting POST. The body of the resulting POST will be
            the JSON-serialized content from the <see cref="P:Microsoft.Bot.Builder.InvokeResponse`1.Body"/> property.
            </summary>
            <typeparam name="T">The type of body in the InvokeResponse.</typeparam>
        </member>
        <member name="P:Microsoft.Bot.Builder.InvokeResponse`1.Body">
            <summary>Gets or sets the body content for the response.</summary>
            <value>The body content.</value>
            <remarks>
            The POST that is generated in response to the incoming invoke activity
            will have a body generated by JSON serializing the object in this field.
            </remarks>
        </member>
        <member name="T:Microsoft.Bot.Schema.ErrorResponseException">
            <summary>
            Exception thrown for an invalid response with ErrorResponse
            information.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Schema.ErrorResponseException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Schema.ErrorResponseException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Schema.ErrorResponseException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Schema.ErrorResponseException"/> class.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Microsoft.Bot.Schema.ErrorResponseException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Schema.ErrorResponseException"/> class.
            </summary>
            <param name="message">The exception message.</param>
            <param name="innerException">Inner exception.</param>
        </member>
        <member name="P:Microsoft.Bot.Schema.ErrorResponseException.Request">
            <summary>
            Gets or sets the information about the associated HTTP request.
            </summary>
            <value>Information about the associated HTTP requests.</value>
        </member>
        <member name="P:Microsoft.Bot.Schema.ErrorResponseException.Response">
            <summary>
            Gets or sets the information about the associated HTTP response.
            </summary>
            <value>Information about the associated HTTP response.</value>
        </member>
        <member name="P:Microsoft.Bot.Schema.ErrorResponseException.Body">
            <summary>
            Gets or sets the body object.
            </summary>
            <value>The body.</value>
        </member>
    </members>
</doc>
